// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package i18n generated by go-bindata.// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x4d\x72\xdb\x20\x14\xde\xeb\x14\xcf\xf2\x2d\xbc\x63\x24\x1c\xab\xa3\x48\x1e\x84\xfb\xb7\x61\x30\xbc\x44\x34\x32\x78\x00\x4f\x9a\xee\x7a\xaf\xde\xa9\x57\xe8\x20\xc9\xa9\x3b\x89\x27\xe9\x8a\x0d\xdf\xef\x7b\x6f\xa9\xdc\xe1\xe0\x6c\x96\x2d\x95\x47\x8d\x36\x1a\x39\x64\x25\xad\x29\xa7\x62\x4d\xaa\x9a\x96\x82\xd1\xae\xdd\xb1\x82\xae\x20\x5f\x4b\x33\xa0\x86\xe8\x40\xe3\x80\x11\x17\xc0\x7b\xf4\x08\x26\x80\xb4\x20\x43\x70\xca\xc8\x88\x1a\x7a\x17\x22\x9c\xac\x46\x0f\xb1\x37\x01\x1e\xf0\x29\xbf\x42\x2b\xbe\xb6\xcd\x7f\x71\xff\x70\x16\x5f\xe1\x5e\x93\x5d\xcd\x45\xc1\x68\x49\x1b\x5e\x91\x5a\x14\xa4\x11\x4d\xcb\xc5\x24\xbb\x82\xbc\xc4\x3b\x79\x1a\x22\xfc\x4d\x0a\x4a\x5a\xeb\x22\xec\x71\x16\xd5\x79\x96\x2d\x93\xf9\x6c\xd3\x76\x5c\x90\x9a\x51\x52\x7e\x11\xf4\x73\xd5\xf1\x6e\x05\xf9\x26\xe5\x92\x83\x47\xa9\x9f\x00\xbf\x9b\x10\xc3\x73\xae\x11\x31\x85\xbb\x16\x67\xea\x25\x25\x9a\x29\x2e\x62\x3d\x9a\xd8\x43\xec\x11\xd4\x70\x0a\x11\x7d\x72\x72\x0a\xe8\xb3\x2d\xe9\xba\x4f\x2d\x2b\xc7\x30\xb7\x84\x17\x9b\x15\xe4\x89\xec\x28\x43\x78\x74\x5e\x27\x42\x63\x95\xf3\x1e\x55\xcc\xb3\x96\x55\x37\x55\x43\xea\x17\xff\x9d\x37\xf7\xc6\xca\xe1\x1a\x70\xd7\x51\x26\xaa\x6e\xc4\x91\x82\x57\x1f\xe9\x0c\x4c\x36\xd2\xdf\x54\x15\x5a\xb9\x1f\x50\x2f\x60\x3b\xa0\x0c\x08\xca\xd9\x28\x55\x1c\x9d\x4b\x7d\x30\xd6\x84\xe8\x65\x74\x7e\x31\x13\x26\xb6\x75\xbb\x6b\x52\x29\x8d\x83\x70\x52\xfd\x48\xf8\xfb\xd7\xcf\x3c\x23\xe5\x6d\xd5\xbc\x9c\x54\x12\xd5\xf3\xb4\x46\xd2\xc9\xc2\x8b\x69\x2d\xfe\x35\xcd\x68\x4d\x38\x2d\xc5\x96\xb5\x1f\x68\xc1\x57\x90\xef\x12\xac\x97\xc9\xfa\x65\xd7\x47\xef\xbe\xa1\x8a\xa3\x85\x6c\xe9\xf1\xde\x38\x7b\x1e\x23\xa3\x37\x55\xdb\xbc\x77\xf9\x61\x02\xbf\x35\xd3\xb4\xb3\x49\x2a\xbd\x67\xa1\xb4\xf7\xef\x96\x19\x97\xfe\x0d\x91\xe3\x20\x6d\x12\x71\x47\xb4\x21\x4a\xf5\x90\xdd\x50\x7e\xce\x43\x19\x6b\xd9\x34\x82\xd9\xf2\x9d\x3b\xd9\x71\xdf\xe7\x36\x6e\xf1\xb0\x47\xff\x5c\x28\x29\xcb\xcb\x02\xf7\x88\x16\xa4\xd6\x78\x09\x79\x3e\xbb\xb9\xf1\xeb\x37\x37\x03\x5e\x3b\xb8\x33\x76\x43\x3a\x51\xd4\xbb\x8e\xd3\xe4\x73\x3b\x03\x2e\x82\xce\x87\xb1\x80\xe2\x95\x3d\xf8\x13\x00\x00\xff\xff\xb7\x32\x9b\x60\xc9\x04\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 1225, mode: os.FileMode(420), modTime: time.Unix(1596012346, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xcd\x6e\xda\x4e\x14\xc5\xf7\xf3\x14\xc8\xbc\x45\x76\x23\x7b\x02\xfe\xcb\xd8\xd1\x78\xf8\xf7\x63\x33\xa2\xc4\x6a\x69\x8b\x1d\x01\xdd\x74\x67\x45\xa5\xa4\x0d\x4d\x1a\x21\x95\x28\x48\x40\x05\x2a\x6a\x05\xb4\xa4\x12\x34\x90\x3c\x0d\xe3\x8f\x15\xaf\x50\xd9\x53\x5c\xa3\x14\x89\xfd\x39\xe7\x9e\xfb\xbb\x37\x99\xb7\x8a\x45\xcb\x04\x20\x99\x2f\x19\x87\x86\x59\x29\xe4\x5e\x02\x09\x29\x88\x20\xba\x0f\x65\x05\x49\x14\x23\x5d\xcb\x62\x11\xed\x25\x04\x56\xeb\xf8\x97\x3d\xd6\xfb\xe1\xfd\xec\xaf\x16\xb6\x37\xee\xbb\x5f\x9a\xfe\x45\x7f\x39\x7b\xef\xb4\x4e\xd8\x9b\x6b\xcf\x6e\x2c\x67\x73\xa7\x75\x23\x6c\x09\xa1\x8f\x35\x75\xd7\x24\x76\x36\x76\x1b\x03\x76\x1a\x86\xed\xc3\xac\x42\xa8\x88\x91\x84\x54\x22\x43\x85\x8a\x50\xa5\xaa\x46\x28\x9f\xb3\x97\x10\xfc\x79\xd3\x1b\xf5\xd8\xdb\xa1\x53\x1f\x2d\x67\x75\xef\xf8\x96\x0f\x59\x2d\x6c\x01\x80\xe4\x33\xab\x5c\x01\x69\x4d\x27\x14\x2a\x18\x41\xe9\x11\x45\x0f\x65\x9d\xe8\x7b\x09\x81\x57\x66\xd3\x09\x1b\x36\x59\x6b\x10\x75\x0f\xd5\x7c\x81\x7f\x56\x8e\x7c\xee\xfc\x8c\x57\xf6\xaf\xaa\xee\x5d\x2f\x18\xf7\xaa\x6c\x94\xc0\x01\xd4\xf5\x07\x1a\x96\xc2\xa2\x19\x48\xc4\x74\x90\x33\xae\xba\x1d\xdb\x6f\x5c\x7a\xe3\xb1\x00\x34\x2c\xa7\x64\x15\x2a\x9b\x92\x0f\xed\x4d\x55\x56\x47\x98\xca\x7a\x28\x82\x22\x91\xff\x0f\x16\x76\x1b\x03\xa7\x36\x75\x5a\x5f\xd9\x79\x00\x2a\xec\x34\xf5\xec\x86\x7b\x3d\x77\x47\x5d\xf7\xbc\xca\x3e\x36\xc3\xe5\x43\x77\x60\xdd\xd7\xb2\x6a\xb0\x8a\xf3\xa9\xe3\x0c\x7b\xdc\x1f\x2a\xa0\x94\x91\xd5\x6d\x48\x13\xb9\xc3\x62\xc1\x4c\x70\x39\x27\xeb\x7d\xfe\x16\x83\x1b\x6f\x87\x91\x02\x09\x92\xe8\x01\xd6\xfe\x43\x22\xf9\x5b\x73\xd2\x8d\x0e\xeb\x77\x7f\xb9\x57\x23\x01\x00\x90\x2c\x19\x4f\x0b\x96\xb9\x06\x8e\x51\x4a\xd6\xd4\x9d\x1e\x8f\x9d\xde\xb0\x76\x3b\xce\x3e\xf6\x2e\x20\xf9\xda\x32\x8d\x75\x6a\xf0\x72\xbb\x65\xae\x13\x36\x4e\x7a\x3c\x70\x6f\x27\xde\xa8\xcb\x6a\x17\x41\xb2\x75\x64\x98\xe5\x4a\x2e\xff\x02\xa4\x10\x59\x37\x46\x18\x6b\x38\x00\x7b\x72\xb7\x9c\xd5\x59\xed\x3b\xaf\x17\xe8\x8f\x4a\xd6\x73\x23\x5f\xc9\x18\xc5\x27\x46\x29\x42\x05\x25\x29\x42\xc3\xa7\x39\xd3\x39\x7b\xd7\x89\x39\xa2\xa7\xff\x83\x72\xdb\x79\x38\xcd\x7b\x1f\xbf\x76\xa5\xa1\x4e\x45\x25\xab\x13\x14\x14\xe4\xe2\xf8\xb3\xae\x16\xf6\x3d\xef\xef\x00\x00\x00\xff\xff\x82\x68\x20\x23\x16\x04\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 1046, mode: os.FileMode(420), modTime: time.Unix(1596012339, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
