// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package i18n generated by go-bindata.// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\xcd\x6e\xe3\x36\x10\xbe\xf3\x29\xc6\xf2\xb5\xe8\x03\xf8\xc6\x4a\x4c\xac\xae\x2d\x09\xfa\xd9\x36\xbd\x08\x34\x39\x8e\xd9\xc8\xa4\x40\x52\x48\xd3\x5b\xdf\xab\xef\xd4\x57\x28\x28\xd3\x5e\x6f\xe3\x60\x5d\x6c\x2e\x81\x01\x7e\xdf\x7c\xdf\xcc\x37\xa3\xa5\x30\xc7\xa3\xd1\x84\x2c\xc5\x30\x39\x8f\x96\xa4\x9b\xae\x69\x59\xdd\x67\x6c\xc3\x5a\xd6\x3f\xd0\x7c\xc3\xb2\x15\x24\x82\x6b\xd0\xc6\x83\xc4\x01\x3d\x42\x7c\x0e\x4a\x83\x98\xac\x45\xed\xc1\x79\xee\x31\x21\x4b\x61\x51\xa2\xf6\x8a\x0f\xe4\x2b\x92\xbe\x66\x4d\xd9\xd5\x29\x5b\x41\xf2\xc0\xd5\x80\x12\xbc\x89\x7c\x0b\x68\x0f\x68\x11\x94\x03\xae\x81\x3b\x67\x84\xe2\x1e\x25\x1c\x8c\xf3\x30\x69\x89\x16\xfc\x41\x39\x78\xc1\xb7\xe4\x03\xda\xfe\xb7\xb2\xf8\x5f\xdc\x7f\x1a\x8d\x37\xb8\x1f\x68\xb7\x69\xfb\xb4\x66\x19\x2b\xda\x9c\x6e\xfa\x94\x16\x7d\x51\xb6\xb1\x25\x2b\x48\x32\xdc\xf3\x69\xf0\xf0\xc5\x29\x08\xae\x43\x77\x76\x18\x8b\xca\x84\x90\x65\x10\x4f\xd6\x65\xd3\xf6\x74\x53\x33\x9a\x3d\xf5\xec\xd7\xbc\x69\x9b\x15\x24\xeb\xe0\x8b\x0f\x16\xb9\x7c\x03\xfc\x43\x39\xef\x2e\xbe\x66\xc4\xa5\xf1\x37\xed\x9c\xfa\x12\x1c\x45\x8a\x2b\x5b\xaf\xca\x1f\xc0\x1f\x2e\x33\xba\xc5\xdb\xff\xf4\xd4\x57\x75\xf9\x33\x4b\xdb\xef\x2a\x31\x5a\xf3\x3b\x0a\x9f\x90\xe6\xa9\x69\xd9\xb6\xcf\xab\xb9\x53\x0f\x65\x57\x04\xed\xd5\x80\xdc\x21\xec\xd5\x30\x84\xa4\x04\xc4\x60\x04\x1f\x20\xaf\x60\xaf\xac\xf3\xff\xfc\xfd\x57\x68\xd4\xe4\xd0\x92\x8a\x36\xcd\x2f\x65\x9d\xcd\x0c\x5b\xda\xa6\xeb\x15\x24\x41\xc8\xc8\x9d\x7b\x35\x56\x06\x31\x4a\x0b\x63\xed\x5c\xb2\xac\xf3\xc7\xbc\xa0\x9b\x77\xef\x8d\x55\xcf\x4a\xf3\xe1\x23\x60\xd7\xb0\xba\xcf\x9b\x19\x47\xd3\x36\xff\xcc\x22\x30\xc8\x08\x6f\xc3\x24\x51\xf3\xdd\x80\x72\x01\xd1\x83\x30\xda\x73\xe1\x67\x0f\x5c\x1e\x95\x56\xce\x5b\xee\x8d\x5d\x44\xc2\x6b\xdf\x85\x01\x37\x89\xc3\x4c\x38\x5b\xa4\xd9\x36\x2f\xde\x07\x29\x14\x95\x31\x4c\x33\xe9\x49\xc2\xbb\x30\x2d\xbe\x16\x5d\xb3\x0d\x6d\x59\x76\x35\xc1\x2e\xc0\x0e\x3c\x48\xbf\x9e\x53\x1c\xcf\x0d\x09\x5d\x95\xd1\xfb\x24\xa0\x54\x27\x05\x84\x2c\x2d\x3e\x2b\xa3\xcf\x79\xaa\xd9\x63\x5e\x16\xf7\x6e\x37\x9c\xc0\xdf\x4a\x54\x58\xca\x10\x89\xf0\xff\x5c\x28\x2c\xf6\xdd\x65\xe6\xad\xfe\x56\x6c\x07\xae\x43\x11\x33\xa2\x76\x9e\x8b\x17\xf2\xc8\xda\xb3\x1f\x56\xd7\x65\x7d\x1a\x62\x94\xbc\x37\x93\x9e\x17\x3a\xf6\x73\x8b\xc7\x1d\xda\xcb\x48\x68\x96\x5d\x8f\x60\x87\xa8\x81\x4b\x89\xd7\x90\xcb\x5d\x89\x33\xfb\xf8\xa8\x44\xc0\xad\x8b\x72\xc6\xae\x69\xd3\xc7\x3b\x1d\x96\x2c\x02\xae\x8c\xc6\xcd\x5f\x40\x7a\x23\x49\x84\x2c\xb5\x91\x48\x8a\x32\x63\x97\xc3\x54\x77\x45\x91\x17\x8f\x7d\x4b\x9b\x4f\x2b\x48\xa8\x94\x10\x1e\x81\xb1\xe7\x8b\x3f\xff\x3c\x37\xd5\x4e\x5a\x2b\xfd\xfc\xc3\x78\x5a\x8e\x57\xae\x3c\x28\x0f\xd2\x68\xfc\x31\xb8\xde\x71\xf1\x32\x8d\x54\x08\x33\x69\x4f\x2a\x5a\xd3\x6d\xcf\xb6\x55\xfb\xb4\x82\x24\xd7\x6e\xda\xef\x95\x50\xe1\xa3\x31\x72\xcb\x8f\xe8\xd1\xba\x84\x84\x76\x34\x5d\x55\x95\xf5\x1c\x69\xed\xa6\x71\x34\x36\xf8\xf1\x6f\x23\x26\x24\x5d\xb3\xf4\xd3\x97\xc3\xf8\x19\xad\xda\x2b\xc1\xfd\x3c\xa2\x39\x0b\x73\xc3\x07\xae\xff\xf3\x85\xb8\xe3\xd8\x05\xd4\xdd\xc7\x6e\xfe\xfb\x37\x00\x00\xff\xff\xe5\x2c\xde\xd9\x3b\x07\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 1851, mode: os.FileMode(420), modTime: time.Unix(1597040351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xd1\x52\xdb\x46\x14\x7d\xd7\x57\x78\xc4\x6b\xa7\x1f\xc0\xdb\x56\x5a\x40\x8d\x2d\x69\x56\xeb\xb6\xf4\x65\xc7\x31\x9a\x96\x06\x24\xc6\x98\x97\x3e\xd5\x50\x88\x4d\xec\x92\x26\xa6\x85\xc6\x53\xec\xd6\x4c\x3c\x49\x6c\x11\xe8\x60\xc0\x40\x7f\x46\xbb\x2b\x3f\xf1\x0b\x9d\x95\x6c\x8d\xc0\x65\xe2\xd7\x9d\x7b\xcf\x39\xf7\x9c\xbd\x77\x26\xef\xae\xae\xba\x8e\x24\xcd\xe4\x57\x36\xd6\x8b\x76\x41\x52\xd2\x59\x0b\x43\x44\x54\x98\x86\x18\x92\x39\xa0\xa5\xa1\x3a\x9b\x92\xd9\xef\x4d\x76\xb6\x4f\xcb\xcd\xe1\x61\x9b\xde\xbc\xa6\x95\x1a\xdf\x3d\x67\x3f\x95\xf8\x1f\x3f\x0f\xdf\xec\xf0\xdb\xb6\x2c\x40\x0a\xf6\x92\xed\x14\x97\x73\x2b\xd2\xbd\x7e\x82\xa0\x65\x64\x91\x02\x67\x53\xf2\x08\xa2\xfd\x31\xf8\xe7\xf8\xee\xba\x14\x78\xc7\xfc\xed\xc1\xf0\xd5\xb1\x7f\xf1\x82\x35\x2a\x74\xfb\x2c\x28\xd5\xfd\x8b\x01\x6b\x5c\xc9\x8f\x80\x90\x6f\x0d\x7d\x5a\x24\xba\xe7\xf1\x7a\x87\x56\x43\xb0\x39\x90\x4d\x63\xa2\x20\xa8\x42\x1d\x6b\x20\x4d\x14\xa0\x13\xdd\xc0\xa3\x61\x67\x53\xf2\x70\x70\x10\xf4\xda\xf4\x79\x97\xd5\x7a\xfe\x45\x2d\xd8\xba\x89\x48\xee\xae\x4b\x62\xbe\xef\xdd\xf5\xa2\xb4\x60\x58\x98\x80\x34\x82\x40\x5d\x24\xf0\x1b\xcd\xc2\xd6\x6c\x4a\x8e\x24\xd3\xfe\x29\xed\x1e\xd0\x46\x27\xd6\x1e\x56\xc7\x2e\x4e\x4a\x8e\xfb\xf8\x60\x2f\x92\x3c\xb6\x73\x12\x80\x7c\xb1\x48\x4c\x64\x7c\x09\x15\x3c\x2d\x56\xeb\x92\xbf\xe9\x85\xea\xad\x45\x0b\xc3\x0c\xd1\xcc\x70\xe2\x39\x23\xab\x0b\x41\x81\xd7\xa7\xdb\x65\xda\x7a\x4f\x77\x0e\x59\xe3\x03\x6b\x5c\x69\xe6\x68\xd8\x8d\x75\xbb\x20\x99\xc0\xb2\xbe\x36\x90\x1a\x36\x65\x00\x56\x16\x04\xb3\xb7\xc3\x9b\xa5\x61\xfd\x30\xf0\x3c\x59\x32\x90\x36\xaf\xe9\x20\x7d\xbf\xe4\x97\xa3\xfb\x55\x59\x0b\x22\xa2\x59\x61\x11\x50\xb0\xf6\x95\xb0\x9b\xd7\x3b\xac\xdc\x67\x8d\x77\xf4\xa5\x88\x29\x9c\xa2\x1f\x94\xea\xfc\x6c\xc0\x7b\x2d\xfe\x72\x87\xfe\x7a\x10\xaa\x09\xbb\x93\xba\xc5\x77\xec\xb6\xa3\xfe\xb0\x02\xa8\x19\x4d\x7f\x2c\xd0\x54\x6e\x69\x75\xd9\x49\x45\xe5\x51\xae\xc1\x5f\xef\x13\xd1\x26\xd5\x21\x98\x06\x18\xaa\x09\xa7\x47\x32\x4f\x5b\xf1\xb7\x8a\x7c\x7d\xc8\x9a\x35\x55\x10\xb2\x82\x09\x3a\xff\xdf\x1e\xab\x5f\x46\xce\x4a\x33\x05\xfb\xbb\x65\xd7\x19\x27\x8c\xe0\xbc\x66\xe8\x53\xad\x0a\xad\x5e\xd1\xa3\xa3\x64\xc2\x89\x0f\x2e\xcd\xfc\xe8\x3a\xf6\x18\x55\x2c\xc9\x74\x98\x63\x84\x7b\x1f\x67\xab\xc3\x6f\x4e\x83\x5e\x8b\x96\x5f\x09\x64\x77\xcd\x76\xd6\x8b\xb9\xfc\x33\x69\x1e\xe2\xb1\x62\x88\x90\x81\x44\x18\x95\x5b\xff\xa2\x46\xcb\x27\x91\x3c\x51\xbf\x56\x70\x7f\xb0\xf3\xc5\x8c\xbd\xfa\xd4\x2e\xc4\xf6\x02\x55\x8d\xed\x8c\xd8\x58\x7f\x40\x77\x9b\x89\x8e\x78\x4d\x47\xf6\x3f\x16\x69\x94\xc0\xc4\x8e\x8e\xbb\x16\x80\x45\x46\xa7\x4c\xb4\x84\xc5\xc9\xf5\xba\xbb\x2e\xfd\xcf\x7e\x3b\xee\x92\x2d\xe9\x86\x0a\xe3\xfd\x46\x59\x5d\xd7\xf4\x79\x82\x81\xf5\x44\xb8\xb7\x7d\xee\x0f\x7e\x0b\x76\x37\xf9\xe6\x25\xdb\x3f\x19\x3e\xdf\x63\xaf\x6b\xfe\x4d\x83\x75\xff\xa6\x8d\x0e\xab\xbc\x0d\x5a\xd5\xcf\x52\x81\xd7\xe7\xdd\x0a\xbd\xdd\xa6\xbd\x2d\x7f\xf0\x21\x7a\xa6\xbd\x2a\xf3\xf6\x3f\x17\x34\x4f\x73\xf9\x67\x1b\x6b\x20\x9f\x77\x37\x9c\xa2\x64\x02\x04\x32\x04\x66\x4c\xbc\x28\x18\xf6\x36\xd9\xfe\x89\xd0\x76\x7e\x26\x4b\x62\x70\x2b\x6b\x9a\x06\xc2\xe1\x8d\xa9\xb1\xba\xc7\xaa\xe2\xe8\xf2\x8f\x03\xfa\xe7\x0b\x59\x52\x16\xa0\xf2\x24\x71\xa6\x9b\xad\xe1\xbb\x6a\x1c\x6f\x68\xec\x4a\xce\x79\x70\x49\x3f\x71\x47\x92\xe1\x4f\x5e\x13\xf1\x83\xff\x0b\x00\x00\xff\xff\x0d\xa4\xc9\xea\x38\x06\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 1592, mode: os.FileMode(420), modTime: time.Unix(1597040317, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
