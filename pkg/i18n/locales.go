// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package i18n generated by go-bindata.// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x41\x6e\xdb\x30\x10\x45\xf7\x3c\xc5\x58\xbe\x45\x76\x82\x4d\x3b\x02\x5c\x31\xa0\xe4\x16\xe8\x46\x60\xc9\x69\x44\x84\xe6\x18\xe4\x08\x41\xba\xeb\xbd\x7a\xa7\x5e\xa1\xa0\x2d\x01\x05\x02\x23\xce\x4a\x1b\xfe\xf7\xbe\x3e\xb9\xb6\x74\x3a\x51\x14\x62\x6d\x13\x3a\x8c\xec\x4d\x10\x5b\x79\x90\xbd\x1c\x76\x75\x73\x90\xdb\x41\xcb\x4e\x1d\xf5\x46\x3e\x40\xb5\x33\x3e\xa0\x03\x26\x70\x18\x90\x71\x05\xfd\x88\x09\xc1\x67\x30\x11\x4c\xce\x64\xbd\x61\x74\x30\x52\x66\x98\xa2\xc3\x04\x3c\xfa\x0c\x2f\xf8\x56\xdd\xc0\x0e\xdf\x55\xfb\x29\xf6\x2f\x8a\xf8\x8e\x2d\xd6\x45\xb9\x28\x1e\x55\xd7\xcf\x9e\x5b\xe4\x6b\xc5\x02\x0f\x09\x8d\x7b\xfb\xdf\xf0\xea\x79\x04\x1e\x11\x6c\x98\x32\x63\x2a\xf8\x29\x63\x12\x4f\x75\xd7\x7d\x53\x7a\x3b\xb4\xaa\x1f\xbe\xd4\xfd\xe6\xf1\x01\xaa\x02\x3b\x9b\x9c\x5f\x29\xb9\x02\xf4\xd1\x52\x4a\x68\xb9\x12\x4a\x37\xfb\xa6\xad\x0f\xef\xce\x53\xf2\xcf\x3e\x9a\x70\x2b\x78\xec\xa4\x1e\x9a\xee\x92\xab\x37\x7d\xf3\x55\xce\xc1\x52\xa3\x9c\x8d\xc4\x80\xd1\xfc\x08\xe8\x56\xf0\x14\xd0\x64\x04\x4b\x91\x8d\xe5\x4b\x73\xe3\x4e\x3e\xfa\xcc\xc9\x30\xa5\xd5\x0c\x2c\xb4\x9d\x3a\xb6\x65\x94\x96\x20\x4f\x76\xbc\x00\xff\xfe\xf9\x5d\x09\x21\xd6\x09\x9f\x3d\xc5\x65\x44\x2d\xf7\x8d\x6a\xef\x7d\x05\x70\x0d\x7f\xb4\x68\xb9\xbc\x32\x67\xf9\x2e\xa2\xf2\x00\xee\xd6\x5c\x6e\xff\x03\xc9\x39\x98\x58\x24\x74\xc6\x98\xd9\xd8\x17\xb1\x97\xfd\xf2\x3f\x52\x6b\xa5\xaf\x03\xcc\x95\x7f\xd2\x14\x5d\xf5\x2f\x00\x00\xff\xff\xc2\x21\x45\x55\x0a\x03\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 778, mode: os.FileMode(420), modTime: time.Unix(1595560655, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd1\xc1\x6a\xe2\x40\x18\x07\xf0\xfb\x3c\xc5\x92\xbc\xc5\xde\x82\x8e\x1a\x70\x33\xcb\x24\xee\xc2\x5e\x82\xb8\x61\x57\x76\x4d\x8a\xda\x4b\x6f\xa1\x54\x22\xb5\xd5\x4a\xa0\x4a\x05\x15\x22\x95\x42\x4d\xab\x05\x45\xad\x4f\xe3\x64\x92\x93\xaf\x50\xc6\x18\x68\xa0\x05\xef\xdf\xf7\xe3\xff\xff\x3e\xbe\x60\x94\x4a\x86\x0e\x00\x5f\x28\x6b\xbf\x35\xbd\x5a\xcc\xff\x07\x49\x98\x85\x0a\x54\x53\x82\x98\x85\x49\x15\x43\x19\xe5\x70\x02\x7e\xfd\xc2\x11\x6b\x10\x74\x1d\xe2\x3c\xfb\x2f\xa3\xdd\xda\xf4\xdd\x11\xbd\xef\x04\xed\xd1\x76\x71\xe9\xf5\xea\xe4\x62\xe6\x9b\xf6\x76\xb1\xf2\x7a\x4b\xee\x13\x44\xfd\x85\xa4\x63\x25\xd2\x74\xa9\x3d\x26\x8d\x25\x07\x00\xff\xd7\xa8\x54\x23\x33\x83\x64\xe5\x00\x7f\x48\x85\x11\xc8\x7c\x4a\x57\xcd\x90\x0a\xee\x6a\x74\xe3\x30\xe7\xb4\xa2\x95\xc1\x77\x41\x96\x7f\x22\x9c\x54\x25\xa4\xa8\xdf\x04\x25\x91\x61\x8e\x5b\xa3\x03\x33\xb0\xbb\xbe\xeb\x72\x00\x61\x31\x2d\x4a\x42\x36\x3e\x72\xdd\x8f\x4f\xe5\x64\x88\x55\x51\xde\x0f\x09\x09\x45\xfc\xc1\xba\x51\x7b\xec\x59\x73\xaf\xf7\x40\x5a\xac\xc0\x3e\xd3\xdc\x37\x6d\x3a\x5b\xd1\xc9\x90\xb6\x6a\xe4\xa6\xb3\x5b\x9b\x87\x6d\xb6\x9a\x42\x39\x89\x55\xf1\x6e\x07\xde\xa3\x13\xee\xef\x27\x00\x5f\xd6\xfe\x14\x0d\x3d\x6a\x8e\x61\x5a\x44\xd2\x51\x9f\x21\x8d\x25\xe9\xf7\xdf\x1f\x21\x76\xcf\x33\x43\xd7\x22\x95\xfd\xe4\x38\x33\x12\x62\xb7\x3d\x1f\xd3\xd7\xa9\x3f\x19\x12\xab\xcd\x64\xe3\x44\xd3\x2b\xd5\x7c\xe1\x1f\x48\x43\x25\x4a\x0c\x31\x46\x98\x35\xac\x6f\xb6\x8b\x2b\x62\x3d\x85\xf1\x38\xf0\x16\x00\x00\xff\xff\xac\x47\x97\x70\x81\x02\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 641, mode: os.FileMode(420), modTime: time.Unix(1595560644, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
