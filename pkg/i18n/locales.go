// Code generated for package i18n by go-bindata DO NOT EDIT. (@generated)
// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\x4d\x6e\xf3\x36\x10\xdd\xf3\x14\x13\x79\x5b\xf4\x00\xde\xf1\x93\x98\x58\x8d\x2c\x09\xfa\xf9\xda\x74\x23\xd0\xd4\x38\x66\x23\x93\x06\x49\x21\x4d\x77\xbd\x57\xef\xd4\x2b\x14\x94\x69\x47\xf9\xe2\x20\x0e\xba\x32\x0c\x70\x66\xde\x9b\xf7\xe6\x69\x21\xf4\x7e\xaf\x15\xc9\xe9\x9a\x75\xec\xb7\xb4\x6e\xea\x25\x44\x39\xdf\x23\xf0\xc1\x20\xef\x5f\x00\xff\x94\xd6\xd9\x88\x90\x85\x18\x46\xeb\xd0\x90\x38\x6b\xeb\x86\x55\x5d\xc2\x32\xd6\xb0\xee\x96\xa6\x19\x4b\x96\x10\x09\xae\x40\x69\x07\x3d\x0e\xe8\x10\xc2\x73\x90\x0a\xc4\x68\x0c\x2a\x07\xd6\x71\x87\x11\x59\x08\x83\x3d\x2a\x27\xf9\x40\xde\x34\xe9\x2a\x56\x17\x6d\x15\xb3\x25\x44\xb7\x5c\x0e\xd8\x83\xd3\xa1\xdf\x0d\x34\x3b\x34\x08\xd2\x02\x57\xc0\xad\xd5\x42\x72\x87\x3d\xec\xb4\x75\x30\xaa\x1e\x0d\xb8\x9d\xb4\xf0\x84\x2f\xd1\x07\x6d\xbb\xdf\x8b\xfc\x4b\xbd\xff\xd2\x0a\x2f\xf4\xbe\xa5\x6d\xd6\x74\x71\xc5\x12\x96\x37\x29\xcd\xba\x98\xe6\x5d\x5e\x34\x61\x25\x4b\x88\x12\xdc\xf2\x71\x70\xf0\xca\x14\x04\x57\x7e\x3b\x1b\x0c\x43\x7b\xbf\x53\x0f\x9e\xac\x8a\xba\xe9\x68\x56\x31\x9a\x3c\xbc\xaa\xb0\xf2\xbc\x7e\x54\x21\xf0\x9a\x2a\xce\x8b\xbf\x48\xe7\xb8\x17\xcf\x28\xb4\x98\xd1\x7a\x96\x6e\x07\x6e\x77\xd6\xe8\x52\xdf\xee\xdb\x43\x57\x56\xc5\x2f\x2c\x6e\xfe\xd7\x88\x83\xd1\x7f\xa0\x70\x11\xa9\x1f\xea\x86\xad\xbb\xb4\x9c\x36\x75\x5b\xb4\xb9\xc7\x5e\x0e\xc8\x2d\xc2\x56\x0e\x83\x77\x8a\xaf\x18\xb4\xe0\x03\xa4\x25\x6c\xa5\xb1\xee\xdf\x7f\xfe\xf6\x8b\x1a\x2d\x1a\x52\xd2\xba\xfe\xb5\xa8\x92\xa9\xc3\x9a\x36\xf1\x6a\x09\x91\x07\x72\xe0\xd6\x3e\x6b\xd3\x7b\x30\x52\x09\x6d\xcc\x34\xb2\xa8\xd2\xbb\x34\xa7\xd9\xbb\xf7\xda\xc8\x47\xa9\xf8\xf0\x51\x61\x5b\xb3\xaa\x4b\xeb\xa9\x8e\xc6\x4d\xfa\x9d\x85\x42\x0f\xc3\xbf\xf5\x4a\xa2\xe2\x9b\x01\xfb\x1b\x08\x1c\x84\x56\x8e\x0b\x37\x71\xe0\xfd\x5e\x2a\x69\x9d\xe1\x4e\x9b\x9b\xd0\x70\xce\x3b\xd7\x60\x47\xb1\x9b\x1a\x4e\x14\x69\xb2\x4e\xf3\xf7\x46\xf2\x43\xfb\x60\xa6\xa9\xe9\x11\xc2\x3b\x33\xdd\xbc\x05\x5d\xb1\x8c\x36\x2c\x99\x29\xd8\xfa\xb2\x1d\xf7\xd0\xe7\x3a\x05\x79\x2e\x40\x68\xcb\x84\x5e\x07\x01\x7b\x79\x44\x40\xc8\xc2\xe0\xa3\xd4\xea\xe4\xa7\x8a\xdd\xa5\x45\x7e\xed\x75\xc3\xb1\xf8\x33\x47\xf9\xa3\xf4\x96\xf0\xbf\xa7\x41\xfe\xb0\xaf\x1e\x33\x5d\xf5\x67\xb6\x1d\xb8\xf2\x43\xf4\x01\x95\x75\x5c\x3c\x91\x3b\xd6\x9c\xf8\xb0\xaa\x2a\xaa\xa3\x88\x01\xf2\x56\x8f\x6a\x3a\xe8\xb0\xcf\x35\xee\x37\x68\xce\x92\xd0\x24\x99\x4b\xb0\x41\x54\xc0\xfb\x1e\xe7\x25\xe7\x5c\x09\x9a\x7d\x1c\x2a\xa1\xe0\x52\xa2\x9c\x6a\x57\xb4\xee\x42\x4e\xfb\x23\x0b\x05\x33\xa2\xe1\xf2\x6f\x20\xbe\xe0\x24\x42\x16\x4a\xf7\x48\xf2\x22\x61\xe7\x60\xaa\xda\x3c\x4f\xf3\xbb\xae\xa1\xf5\xfd\x12\x22\xda\xf7\xe0\x1f\x81\x36\xa7\xc4\x9f\xfe\x9e\x96\x6a\x46\xa5\xa4\x7a\xfc\xe9\x70\x3c\x8e\x67\x2e\x1d\x48\x07\xbd\x56\xf8\xb3\x67\xbd\xe1\xe2\x69\x3c\x50\x21\xf4\xa8\x1c\x29\x69\x45\xd7\x1d\x5b\x97\xcd\xc3\x12\xa2\x54\xd9\x71\xbb\x95\x42\xfa\x8f\xc6\x81\x1b\xbe\x47\x87\xc6\x46\xc4\xaf\xa3\x6e\xcb\xb2\xa8\x26\x4b\x2b\x3b\x1e\x0e\xda\x78\x3e\xee\xe5\x80\x11\x89\x57\x2c\xbe\x7f\x0d\xc6\xef\x68\xe4\x56\x0a\xee\x26\x89\x26\x2f\x9c\xa3\xee\x1b\x8d\xef\xdb\xb2\xa3\x71\x5c\xb4\xf9\x57\x42\xef\x0d\xf0\xab\xd3\x8f\x2c\xbc\xa3\x7e\xf8\x2e\x5d\x31\xcd\x57\x7d\x61\x48\x90\xf5\xdb\x84\x91\x04\x8e\xb7\x69\xc6\x8e\xb1\x90\xb7\x59\xf6\x1a\xba\x41\x36\x77\x26\xe5\x63\x18\x61\x83\x5b\x6d\x10\xec\xb3\x74\x62\x27\xd5\xe3\xfc\x01\x3f\xd2\x9e\xd9\xb6\x42\xab\x47\x23\xf0\x3d\xb5\xd9\xf4\x4f\x67\xce\xa2\x9e\x10\xf2\x5f\x00\x00\x00\xff\xff\xe7\x41\xb6\xc3\x97\x08\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 2199, mode: os.FileMode(420), modTime: time.Unix(1597220574, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\x4d\x53\xdb\x56\x14\xdd\xeb\x57\x78\xcc\xb6\xd3\x1f\xc0\xee\x21\x3d\x40\x45\x96\x34\x4f\x52\x5b\xba\xd1\x38\x46\xd3\xd2\x80\xc5\xf8\x63\xd3\x55\x0d\xc5\x1f\xc4\xae\x69\x62\x52\x68\x3c\xc5\x4e\x4d\xf1\x24\xb1\x4d\x20\x83\x01\x61\xfa\x67\xf4\x9e\xe4\x15\x7f\xa1\xf3\x24\x59\x11\x71\x69\xbc\xd5\xdc\x7b\xce\x79\xe7\xdc\x7b\x35\x97\x32\x37\x37\xcd\x34\x23\x82\x04\xd4\xe1\xb7\xbc\xa2\x2a\xf3\xb1\x38\xde\xaf\x39\xa7\x67\x78\x78\x8e\x7b\x87\xb8\xd9\x8d\x33\xcc\x5c\x6a\x23\x9f\xcd\x19\x19\x86\x15\x34\x45\x85\x48\xe7\xa0\x00\x55\xa8\x2f\x02\x5e\x80\xdc\x7c\x2c\x4e\x7e\x6f\x91\x8b\x03\x5c\x6e\x8d\x8f\x3a\x78\xf4\x02\x57\x6a\xce\xde\x25\xf9\xb9\xe0\xfc\xf1\xcb\xf8\x55\xd1\xb9\xeb\x78\x20\x19\x63\xcd\x48\xe7\xd6\x93\x1b\xcc\x83\x7e\x1d\x41\x45\xd2\x10\x0b\x29\xb7\x0f\xd1\x79\xef\x7e\x38\xb9\xbf\x2d\xb8\x83\x13\xe7\xf4\x70\xfc\xfc\xc4\xbe\x7a\x46\x9a\x15\xbc\x7b\xe1\x16\x1a\xf6\x95\x45\x9a\x37\xf1\x47\x40\xf4\xef\x24\x71\x56\x24\x5c\x1f\x38\x8d\x2e\xae\x7a\x60\x8b\x40\x13\x54\x9d\x45\x90\x83\xa2\xca\x03\x41\x67\x81\xa8\x8b\x92\x1a\x3c\x76\x3e\x16\x1f\x5b\x87\x6e\xbf\x83\x4b\x3d\x52\xeb\xdb\x57\x35\x77\x67\xe4\x93\xdc\xdf\x16\xe8\xfb\x7e\x30\xb3\x39\x66\x59\x52\x54\x1d\x08\x08\x02\x6e\xf5\xa3\xa5\xbe\xe4\x88\xa5\x81\x76\xaf\x3a\x74\x71\x5a\x72\xd8\xe7\x58\x75\x5f\xf2\xc4\xce\x69\x00\x7d\x61\x55\x97\x91\xf4\x15\x64\xd5\x59\xb1\xda\xd7\xce\xab\xbe\xa7\x5e\x59\x55\x54\x98\xd0\x79\xd9\x7b\xf1\xa2\xa4\x89\x54\x90\x3b\x18\xe2\xdd\x32\x6e\xbf\xc5\xc5\x23\xd2\x7c\x47\x9a\x37\xbc\x1c\x3c\x36\x9f\x35\x32\x8c\x0c\x14\xe5\x1b\x09\x71\x5e\x53\x02\xa8\xec\x32\x65\x1e\x14\x9d\x56\x61\xdc\x38\x72\x07\x83\x38\x23\x21\x7e\x89\x17\x81\xf0\xb0\xe4\xd7\xe3\x87\x55\x9a\x02\x91\xce\x2b\x5e\x11\x60\x55\xfe\x6b\x6a\xb7\xd3\xe8\x92\xf2\x90\x34\xdf\xe0\x7d\x1a\x93\xf7\x8a\xa1\x5b\x68\x38\x17\x96\xd3\x6f\x3b\xfb\x45\xfc\xdb\xa1\xa7\xc6\xeb\x8e\xea\xa6\xe3\xd8\xeb\xf8\xfd\x5e\x05\xe0\x12\xbc\xf8\x58\xa0\xb1\xe4\xda\xe6\x7a\x3a\xe6\x97\xfb\xb9\xba\xaf\xdf\x46\xa2\x8d\xaa\x43\x50\x00\x2a\xe4\x22\x4e\x07\x32\xcf\xdb\xe1\x58\xf9\xbe\x7e\xca\xaa\xc9\x1c\xf0\x58\xc1\x14\x9d\xfd\x4f\x9f\x34\xae\x7d\x67\x99\xb9\x8c\xf1\xfd\xba\x99\x9e\x24\x8c\xe0\x12\x2f\x89\x33\xad\x0a\xae\xde\xe0\xe3\xe3\x68\xc2\x91\x01\x67\xe6\x7e\x32\xd3\xc6\x04\x95\x2e\xc9\x6c\x98\x13\x84\x07\x83\xb3\xd3\x75\x46\xe7\x6e\xbf\x8d\xcb\xcf\x29\xb2\xb9\x65\xa4\xb3\xb9\x64\xea\x29\xb3\x04\xd5\x89\x62\x88\x90\x84\x68\x18\x95\x3b\xfb\xaa\x86\xcb\x67\xbe\x3c\x5a\xbf\x95\x31\x7f\x34\x52\xb9\x84\xb1\xf9\xc4\xc8\x84\xf6\x02\x8e\x0b\xed\xf4\xd9\xc8\xd0\xc2\x7b\xad\x48\x47\xb8\xa6\x81\xfd\x8f\x45\xea\x27\x30\xb5\xa3\x93\xae\x65\xa0\xe8\xc1\x29\xa3\x2d\x5e\x71\x74\xbd\xee\x6f\x0b\xff\xb1\xdf\x69\x73\xcd\x60\x44\x89\x83\xe1\x7e\x23\x4d\x14\x79\x71\x49\x57\x81\xb2\x42\xdd\xdb\xbd\xb4\xad\x97\xee\xde\xb6\xb3\x7d\x4d\x0e\xce\xc6\xa5\x3a\x79\x51\xb3\x47\x4d\xd2\xfb\x0b\x37\xbb\xa4\x72\xea\xb6\xab\x5f\xc4\xdc\xc1\xd0\xe9\x55\xf0\xdd\x2e\xee\xef\xd8\xd6\x3b\xff\x33\xee\x57\xc9\xe0\xe0\x4b\x4a\xf3\x24\x99\x7a\x9a\xdf\x02\xa9\x94\x99\x4f\xe7\x18\x19\x20\x90\xd0\x61\x42\x56\x57\x29\x43\x7d\x9b\x1c\x9c\x51\x6d\x97\x17\x71\x86\x3e\x5c\xd1\x64\x59\x42\xaa\x77\x63\x6a\xa4\x31\x20\x55\x7a\x74\x9d\xf7\x16\xfe\xf3\x59\x9c\x61\x97\x21\xbb\x12\x39\xd3\xad\xf6\xf8\x4d\x35\x8c\x37\xbc\x22\x0b\x80\x5d\xd1\x64\x1d\xb0\xac\xa4\x89\xb3\xde\x13\xdc\x29\xd9\xd6\xc8\xfd\xf0\x37\xae\x0f\x1f\xb9\x2a\xcc\xdc\xd6\x46\x32\xfd\xc9\xa1\xfe\x0c\x6c\x74\xb6\xa6\x61\x23\x3f\xa3\x05\xcf\x27\x26\xd0\xbe\xc8\x0b\xd0\xdf\x50\x51\x13\x84\x8f\xb7\x2b\xc0\xa7\x52\xc9\xcb\x92\x6d\x5d\xe2\x62\x0d\x97\x4b\xa4\xf6\x3a\xaa\x3f\x32\x62\xc8\xc8\x9a\xf9\x4c\xca\x98\x56\x1d\x61\xfa\x1f\xfc\x60\x8b\xff\x0d\x00\x00\xff\xff\x9a\x07\x54\x08\x5b\x07\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 1883, mode: os.FileMode(420), modTime: time.Unix(1597220562, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
