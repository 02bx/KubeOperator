// Code generated for package i18n by go-bindata DO NOT EDIT. (@generated)
// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x41\x8e\xe3\x36\x10\xbc\xf3\x15\x6d\xf9\x1a\xe4\x01\xbe\x31\x12\x67\xac\xac\x2d\x09\x94\xb4\xc9\xe4\x22\xd0\x64\x7b\xcc\x8c\x4c\x0a\x24\x85\xc9\xe4\x96\x7f\xe5\x4f\xf9\x42\x40\x59\xf6\x7a\x33\x1e\xac\x83\xf5\xc5\x10\xc0\xaa\xee\xaa\xee\xae\xa5\xb4\xc7\xa3\x35\x84\x2c\x65\x3f\xfa\x80\x8e\xa4\x9b\xb6\x6e\x18\xef\x32\xb6\x61\x0d\xeb\x1e\x68\xbe\x61\xd9\x0a\x12\x29\x0c\x18\x1b\x40\x61\x8f\x01\x61\x7e\x0e\xda\x80\x1c\x9d\x43\x13\xc0\x07\x11\x30\x21\x4b\xe9\x50\xa1\x09\x5a\xf4\xe4\x2b\x92\x8e\xb3\xba\x6c\x79\xca\x56\x90\x3c\x08\xdd\xa3\x82\x60\x67\xbe\x05\x34\x07\x74\x08\xda\x83\x30\x20\xbc\xb7\x52\x8b\x80\x0a\x0e\xd6\x07\x18\x8d\x42\x07\xe1\xa0\x3d\xbc\xe0\x5b\xf2\x01\x6d\xf7\x5b\x59\xfc\x2f\xee\x3f\xad\xc1\x1b\xdc\x0f\xb4\xdd\x34\x5d\xca\x59\xc6\x8a\x26\xa7\x9b\x2e\xa5\x45\x57\x94\xcd\x6c\xc9\x0a\x92\x0c\xf7\x62\xec\x03\x7c\x51\x0a\x52\x98\xe8\xce\x0e\xe7\xa2\x2a\x21\x64\x19\x9b\x27\xeb\xb2\x6e\x3a\xba\xe1\x8c\x66\x4f\x1d\xfb\x35\xaf\x9b\x7a\x05\xc9\x3a\xea\x12\xbd\x43\xa1\xde\x00\xff\xd0\x3e\xf8\x8b\xae\x09\x71\x31\xfe\xa6\x9c\x93\x2f\x51\xd1\x4c\x71\x25\xeb\x55\x87\x03\x84\xc3\x65\x46\xb7\x78\xbb\x9f\x9e\xba\x8a\x97\x3f\xb3\xb4\xf9\xae\x12\x83\xb3\xbf\xa3\x0c\x51\xec\xe8\xd1\x91\x8a\xd6\xf5\x2f\x25\xcf\x26\xbf\xb6\xb4\x49\xd7\x2b\x48\x22\xd9\x20\xbc\x7f\xb5\x4e\x45\x42\x6d\xa4\x75\x6e\x82\x95\x3c\x7f\xcc\x0b\xba\x79\xf7\xde\x3a\xfd\xac\x8d\xe8\x3f\x02\xb6\x35\xe3\x5d\x5e\x4f\x38\x9a\x36\xf9\x67\x36\x03\x63\x1b\xf1\x6d\x9c\x06\x1a\xb1\xeb\x51\x2d\xa0\xea\x51\x78\x04\x69\x4d\x10\x32\x4c\x9d\x0b\x75\xd4\x46\xfb\xe0\x44\xb0\x6e\x31\x13\x46\xb6\x87\xb2\x2d\xa2\xef\x85\x05\x3f\xca\xc3\x44\xf8\xcf\xdf\x7f\x25\x84\x66\xdb\xbc\x78\xbf\x0c\xb1\xa8\x9a\x17\x62\x22\x3d\xb5\xf0\x6e\x21\x16\x5f\x37\xcd\xd9\x86\x36\x2c\xbb\x9a\x42\x1b\x61\x07\x11\x5b\xbf\xf6\x7a\xb6\xf8\x46\x0b\x6d\x95\xd1\xfb\x5a\x40\xa5\x4f\x1d\x10\xb2\x74\xf8\xac\xad\x39\xef\x04\x67\x8f\x79\x59\xdc\x7b\xa1\x70\x02\x7f\x6b\x2b\xe2\x61\xc5\x95\x88\xff\xe7\x42\xf1\x38\xef\x2e\x33\x5d\xe6\xb7\x56\xaf\x17\x26\x16\xb1\x03\x1a\x1f\x84\x7c\x21\x8f\xac\x39\xeb\x61\x9c\x97\xfc\x34\xc4\xb9\xe5\xbd\x1d\xcd\x74\x94\xb3\x9f\x5b\x3c\xee\xd0\x5d\x46\x42\xb3\xec\x7a\x04\x3b\x44\x03\x42\x29\xbc\x86\x5c\xb2\x61\x9e\xd9\xc7\xc1\x30\x03\x6e\xa5\xc2\x19\xbb\xa6\x75\x37\x67\xed\x0a\x92\x6a\x06\x5c\x09\x9d\xaf\x77\x01\xe9\x8d\x4d\x22\x64\x69\xac\x42\x52\x94\x19\xbb\x84\x0b\x6f\x8b\x22\x2f\x1e\xbb\x86\xd6\x9f\x56\x90\x50\xa5\x20\x3e\x02\xeb\xce\xa9\x3d\x7d\x9e\x4d\x75\xa3\x31\xda\x3c\xff\x30\x9c\x8e\xe3\x55\xe8\x00\x3a\x80\xb2\x06\x7f\x8c\xaa\x77\x42\xbe\x8c\x03\x95\xd2\x8e\x26\x90\x8a\x72\xba\xed\xd8\xb6\x6a\x9e\x56\x90\xe4\xc6\x8f\xfb\xbd\x96\x3a\x06\xff\x20\x9c\x38\x62\x40\xe7\x13\x12\xed\xa8\xdb\xaa\x2a\xf9\xb4\xd2\xc6\x8f\xc3\x60\x5d\xd4\x13\xde\x06\x4c\x48\xba\x66\xe9\xa7\x2f\xe1\xf6\x19\x9d\xde\x6b\x29\xc2\x34\xa2\x69\x17\x26\xc3\x7b\x61\xfe\x93\xf2\x77\x04\x56\x44\xdd\x1f\x58\xf1\xf7\x6f\x00\x00\x00\xff\xff\x9a\xc1\x4e\xbd\xff\x06\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 1791, mode: os.FileMode(420), modTime: time.Unix(1596854454, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xd1\x52\xdb\x46\x14\x7d\xd7\x57\x78\xc4\x6b\xa7\x1f\xc0\xdb\x56\x5a\x40\x8d\x2c\x79\x56\x52\x5b\xfa\xa2\x71\x8c\xa6\xa5\x01\x89\x31\xe6\xa5\x4f\x35\x14\x82\x89\x5d\xd2\xc4\xb4\xa4\xf1\x14\xbb\x35\x13\x4f\x5a\x4b\x04\x3a\xd8\x44\x98\xfe\x8c\x76\x57\x7a\xe2\x17\x32\x2b\xd9\x1a\x39\x0e\x33\x7e\xdd\xb9\xf7\xdc\xb3\xe7\x9c\x7b\x17\x4a\xce\xe6\xa6\x63\x73\xdc\x42\x69\x63\x67\xbb\x62\x95\x39\x41\x36\x34\x1d\x22\x53\x84\x32\xd4\xa1\xb9\x04\x24\x19\x8a\x8b\x39\x9e\xfc\xde\x26\x57\x27\xf8\xb0\x1d\xbd\xea\xe2\xd1\x4b\x5c\x6b\xd0\xa3\x6b\xf2\x53\x95\xfe\xf1\x73\xf4\xfa\x80\xde\x75\x79\x06\x52\xb6\xd6\x2c\xbb\xb2\x5e\xdc\xe0\xa6\xfa\x4d\x04\x35\xd5\x40\x02\x5c\xcc\xf1\x63\x88\xee\xbb\xf0\xbf\xf3\xfb\xdb\x6a\xe8\x9d\xd3\x37\xa7\xd1\x8b\xf3\x60\xf8\x8c\xb4\x6a\x78\xff\x2a\xac\x36\x83\xa1\x4f\x5a\xef\xf9\x07\x40\xcc\x6f\x55\x65\x5e\x24\x7c\xec\xd1\x66\x0f\xd7\x63\xb0\x25\x60\xc8\xba\x29\x20\x28\x42\x45\x97\x80\x6c\x0a\x40\x31\x15\x55\x1f\x7f\x76\x31\xc7\x47\xfe\x69\xe8\x76\xf1\xd3\x3e\x69\xb8\xc1\xb0\x11\xee\x8d\x92\x21\xf7\xb7\x55\xf6\xbf\xef\x9d\xed\x0a\xb7\xa2\x6a\xba\x09\x64\x04\x81\xb8\x6a\xc2\x6f\x24\x4d\xd7\x16\x73\x7c\x42\x19\x0f\x2e\x71\xff\x14\xb7\x7a\x29\xf7\xb8\x3a\x55\x71\x96\x72\xda\x47\xfd\xe3\x84\xf2\x44\xce\x59\x00\xf3\x8b\x55\xb3\x80\xd4\x2f\xa1\xa0\xcf\x8b\xd5\xb9\xa1\xaf\xdd\x31\xfb\x9d\x6d\xab\xcc\x15\x80\xa6\x7d\xad\x22\x31\xfe\x77\x1e\xe8\xc2\x0a\x83\xf2\x0e\x68\xbb\x1a\x35\x5f\x85\x9e\xc7\x73\x2a\x92\x96\x25\x05\xc8\xd3\x25\xbf\x9c\x4d\x57\x19\x1a\x44\xa6\xa4\xc5\x45\x40\xd0\xa5\xaf\x98\x7e\xb4\xd9\x23\x87\x03\xd2\x7a\x8b\x9f\x33\xdd\x63\x5a\x83\xb0\xda\xa4\x57\x3e\x75\x3b\xf4\xf9\x01\xfe\xf5\x34\x66\x13\x77\xb3\xd6\x25\xd5\x50\x26\xf9\xea\x77\x93\xfe\xb8\x02\x88\x79\x49\x79\xc8\xa1\x5c\x71\x6d\x73\xdd\xce\x25\xe5\x89\x51\xe1\x5f\xff\x64\xbc\xca\xb2\x43\x50\x06\x3a\x14\x33\xd2\x8d\x69\x5e\x76\xd2\x9c\x24\x42\x7d\x3c\xd5\x28\x88\x20\x9e\x0a\x66\xc6\x05\xff\xbb\xa4\x79\x93\x28\xcb\x2d\x94\xad\xef\xd6\x1d\x7b\x62\x19\x82\xcb\x92\xaa\xcc\x95\x7d\x5c\x7f\x8f\xcf\xce\xb2\x96\x65\x12\xcb\x2d\xfc\xe8\xd8\xd6\x04\x95\xa5\x7e\x3e\xcc\x09\xc2\x54\x12\xf6\x7a\x74\x74\x19\xba\x1d\x7c\xf8\x82\x21\x3b\x5b\x96\xbd\x5d\x29\x96\x9e\x70\xcb\x50\x9f\x30\x86\x08\xa9\x88\x99\x51\xbb\x0b\x86\x0d\x7c\x78\x91\xd0\x63\xf5\x5b\x65\xe7\x07\xab\x54\xc9\x5b\x9b\x8f\xad\x72\x2a\x2f\x10\xc5\x54\xce\x64\x1a\x19\xf8\xf8\xa8\x9d\xe9\x48\xf7\x6e\x2c\xff\x43\x96\x26\x0e\xcc\x2c\xdd\xa4\x6b\x05\x68\xe6\xf8\x36\xb1\x96\xb8\x38\xbb\x2f\xf7\xb7\xd5\x4f\x2c\xac\xed\xac\x59\x9c\xa2\x8a\x30\x5d\x58\x64\x28\x8a\xa4\x2c\x9b\x3a\xd0\x1e\x31\xf5\xf6\xaf\x03\xff\xb7\xf0\x68\x97\xee\xde\x90\x93\x8b\xe8\xe9\x31\x79\xd9\x08\x46\x2d\xd2\xff\x1b\xb7\x7a\xa4\xf6\x26\xec\xd4\x3f\xcb\x85\xde\x80\xf6\x6b\xf8\x6e\x1f\xbb\x7b\x81\xff\x6f\xf2\x8c\xdd\x3a\xf1\x4e\x3e\x67\x63\x1e\x17\x4b\x4f\x76\xb6\x40\xa9\xe4\xec\xd8\x15\xae\x00\x10\xc8\x9b\x30\x5f\xd0\x57\xd9\x84\xe3\x5d\x72\x72\xc1\xb8\x5d\x5f\xf1\x1c\xfb\xb8\x66\x14\x0a\x2a\xd2\xe3\xa3\xd1\x20\x4d\x8f\xd4\xd9\x15\xa5\xef\x7c\xfc\xe7\x33\x9e\x13\x56\xa0\xf0\x28\x73\x77\xdb\x9d\xe8\x6d\x3d\xb5\x37\x16\x76\xa3\x68\x7f\x74\x1a\x3f\x71\x18\xa2\xbd\x5e\x36\x14\x59\xff\x67\x2f\x04\x0b\xf1\x87\x00\x00\x00\xff\xff\xb0\x18\x0e\xb0\x0c\x06\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 1548, mode: os.FileMode(420), modTime: time.Unix(1596883227, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
