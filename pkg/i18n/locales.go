// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package i18n generated by go-bindata.// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x4b\x6e\xdb\x30\x14\xdc\xeb\x14\xcf\xf2\x2d\xbc\x23\x24\x3a\x56\xa1\x48\x06\x45\xf5\xb7\x11\x68\xf2\x25\x62\x23\x93\x06\x49\x23\x4d\x77\xbd\x57\xef\xd4\x2b\x14\x94\xe4\xd4\x45\x6c\xc4\x5d\x71\xc3\x99\x37\xf3\xe6\xcd\x52\xda\xfd\xde\x9a\x24\x59\x4a\x87\x0a\x4d\xd0\x62\x48\x72\x5a\x52\x4e\xbb\x35\x29\x4a\x9a\x77\x8c\x36\x75\xcb\x32\xba\x82\x74\x2d\xf4\x80\x0a\x82\x05\x85\x03\x06\x5c\x00\xef\xd1\x21\x68\x0f\xc2\x80\xf0\xde\x4a\x2d\x02\x2a\xe8\xad\x0f\x70\x34\x0a\x1d\x84\x5e\x7b\x78\xc2\x97\xf4\x0a\x6d\xf7\xb5\xae\xfe\x8b\xfb\x87\x35\x78\x81\x7b\x4d\xda\x92\x77\x19\xa3\x39\xad\x78\x41\xca\x2e\x23\x55\x57\xd5\xbc\x9b\xc6\xae\x20\xcd\xf1\x41\x1c\x87\x00\x7f\x9d\x82\x14\xc6\xd8\x00\x3b\x9c\x87\xaa\x34\x49\x96\x51\x7c\xb2\xa9\x1b\xde\x91\x92\x51\x92\x7f\xe9\xe8\xe7\xa2\xe1\xcd\x0a\xd2\x4d\xf4\x25\x06\x87\x42\xbd\x00\x7e\xd7\x3e\xf8\x57\x5f\x23\x62\x32\x77\xcd\xce\xb4\x97\xe8\x68\xa6\x38\xb3\xf5\xac\x43\x0f\xa1\x47\x90\xc3\xd1\x07\x74\x51\xc9\xd1\xa3\x4b\xb6\xa4\x69\x3e\xd5\x2c\x1f\xcd\xdc\x13\x9e\x6d\x56\x90\x46\xb2\x83\xf0\xfe\xd9\x3a\x15\x09\xb5\x91\xd6\x39\x94\x21\x4d\x6a\x56\xdc\x15\x15\x29\xdf\xfc\xb7\x4e\x3f\x6a\x23\x86\x6b\xc0\xb6\xa1\xac\x2b\x9a\x11\x47\x32\x5e\x7c\xa4\x33\x30\xca\x88\x7f\xe3\xaa\xd0\x88\xdd\x80\x6a\x01\xdb\x01\x85\x47\x90\xd6\x04\x21\xc3\xa8\x5c\xa8\xbd\x36\xda\x07\x27\x82\x75\x8b\x99\x30\xb2\xad\xeb\xb6\x8a\x4b\xa9\x2c\xf8\xa3\xec\x47\xc2\xdf\xbf\x7e\xa6\x09\xc9\xef\x8b\xea\x6d\x52\x71\xa8\x9a\xd3\x1a\x49\x27\x09\x6f\xd2\x5a\xfc\x2b\x9a\xd1\x92\x70\x9a\x77\x5b\x56\x7f\xa0\x19\x5f\x41\xda\x46\x58\x2f\xa2\xf4\xf3\x5d\x1f\x9c\xfd\x86\x32\x5c\x90\xd0\x6e\x73\x72\x9b\x04\x54\x7a\x52\x90\x24\x4b\x87\x8f\xda\x9a\xd3\x21\x30\x7a\x57\xd4\xd5\xad\xf5\x81\x09\xfc\xde\x55\xc4\xab\x8f\x27\x11\xdf\xd3\xa0\xd8\x9c\x9b\xc7\x8c\xb5\x79\x67\xc8\x61\x10\x26\x0e\xb1\x07\x34\x3e\x08\xf9\x94\xdc\x51\x7e\xf2\x43\x19\xab\xd9\x14\xe2\x2c\xf9\xc1\x1e\xcd\xd8\x98\x79\x9f\xf7\xb8\xdf\xa1\x7b\x8d\x84\xe4\xf9\x79\x04\x3b\x44\x03\x42\x29\x3c\x87\xbc\x16\x77\xce\xec\x7a\x6b\x67\xc0\xa5\xca\x9e\xb0\x1b\xd2\x74\x59\xd9\x36\x9c\x46\x9d\xdb\x19\x70\x66\x74\xae\xd6\x02\xb2\x0b\x97\xf4\x27\x00\x00\xff\xff\x09\x0d\x5c\x7c\x0b\x05\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 1291, mode: os.FileMode(420), modTime: time.Unix(1596016623, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xdd\x6e\xd2\x50\x1c\xbf\xef\x53\x90\xf2\x16\xbb\x3b\x69\xcf\xb6\x9a\xae\x5d\x4e\x4f\xfd\xba\x39\x99\xac\xd1\xa9\xb4\x0b\xe0\x8d\x77\xcd\x22\x32\x1d\x6e\x2e\x4d\x64\x19\x09\x60\x20\x12\x0d\x45\x99\x09\x6c\xb0\xf9\x32\x9c\x7e\x5c\xf1\x0a\xa6\x3d\x52\x8b\x48\xc2\xfd\xef\xeb\xfc\x7e\xff\x93\xcd\x59\xf9\xbc\x65\x72\x5c\x36\x57\x30\xf6\x0d\xb3\x74\xb0\xf7\x92\x13\xa1\x0c\x31\x24\x9b\x40\x92\xa1\x48\x10\xd4\x54\x1d\x09\x70\x23\xc3\xd3\x4a\x33\xbc\x68\xd3\xf6\x8f\xe0\x67\x67\x36\xb1\x83\x7e\xc7\xff\x52\x0b\xcf\x3b\xd3\xd1\x7b\xaf\x7e\x4c\xdf\x5c\x05\xb6\x33\x1d\x8d\xbd\xfa\x0d\xbf\x42\x84\x3c\x56\x95\x75\x95\xe8\x69\xdf\x77\xba\xf4\x24\x16\xdb\x04\xba\x8c\x89\x80\xa0\x08\x15\x2c\x01\x99\x08\x40\x21\x8a\x8a\x09\xf3\xd9\xc8\xf0\xe1\xb8\x16\xb8\x6d\xfa\xb6\xe7\x55\xdd\xe9\xa8\x1a\x1c\xdd\x32\x93\xd9\xc4\xe6\x39\x2e\xfb\xcc\x2a\x96\xb8\x6d\x55\xc3\x04\xc8\x08\x02\xf1\x11\x81\x0f\x25\x0d\x6b\x1b\x19\x9e\x45\xa6\xc3\x01\xed\xd5\x68\xbd\x9b\x64\x8f\xd1\xec\x01\xff\x8d\x9c\xf0\xfc\xf1\x29\x8b\x1c\x5e\x96\xfd\xbb\x76\x64\xf7\xaa\x68\x14\xb8\x5d\xa0\x69\x0f\x54\x24\xc6\x41\x77\x00\x16\xb6\x23\x9d\x7e\xd9\x6f\xda\xa1\x73\x11\xf4\xfb\x3c\xa7\x22\x69\x4b\x52\x80\xbc\x08\xf9\xd0\x58\x44\xe9\x1a\x44\x44\xd2\x62\x10\x10\xb0\x74\x3f\x7a\xb0\xef\x74\xbd\xca\xd0\xab\x7f\xa5\x67\x51\x51\x71\xa6\x61\x60\x3b\xfe\xd5\xd8\x77\x5b\xfe\x59\x99\x7e\xac\xc5\x8f\x8f\xd9\x11\x75\x53\xd5\x95\xe8\x29\xde\xa7\xa6\xd7\x6b\x33\x7e\x8c\x00\xe2\x8e\xa4\xac\xaa\x34\xb3\xb7\x9f\x3f\x30\x33\x0c\xce\x9a\x0d\x3e\x7f\x4b\x95\x9b\x4e\x87\xa0\x0c\x30\x14\xc9\x2e\x52\xef\x41\x01\xff\x8d\x39\x68\x25\xc3\x86\xad\x6b\xff\xd2\xfd\xd7\x55\xdf\x15\x41\xec\x0a\x96\xec\xa6\xbf\x5c\xcf\xb9\x66\x43\x72\xd9\x82\xf1\xf4\xc0\x32\xe7\x23\x21\xb8\x25\xa9\xca\x5a\xc7\x4a\x4f\x6e\x68\xa3\x91\xde\x2b\x75\x62\x5c\xf6\xb5\x65\x1a\x73\xd5\xe8\x4c\xd7\xd3\x9c\x2b\x2c\x9c\xc1\x51\xd7\xbf\x1d\x04\x6e\x8b\x56\xce\x23\x65\xeb\xd0\x30\x8b\xa5\xbd\xdc\x0b\x6e\x0b\xe2\x79\x62\x88\x90\x8a\xa2\x31\x8e\xef\xa6\xa3\x2a\xad\x7c\x67\xf1\x22\xfc\x61\xc1\x7a\x6e\xe4\x4a\x3b\x46\xfe\x89\x51\x48\xea\x05\xa2\x98\xd4\xc9\xdc\xbc\xe1\x98\xbe\x6b\xa6\x18\xc9\x47\xf9\x53\xff\xaa\x49\xd9\x02\x4b\xbf\x64\xce\xda\x06\x1a\x11\x64\x5d\xc3\x30\x0a\xc8\xc0\xe9\x03\x9f\x4d\xec\x25\xee\xef\x00\x00\x00\xff\xff\xee\xc4\x6e\x74\x4a\x04\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 1098, mode: os.FileMode(420), modTime: time.Unix(1596016605, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
