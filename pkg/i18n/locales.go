// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package i18n generated by go-bindata.// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\xcb\x6e\xeb\x36\x10\xdd\xf3\x2b\xc6\xf2\xb6\xe8\x07\x78\xc7\x2b\x31\xb1\x1a\x5b\x12\xf4\xb8\x6d\xba\x11\x68\x72\x1c\xb3\x91\x49\x83\xa4\x90\xa6\xbb\xfe\x57\xff\xa9\xbf\x50\x50\xa6\x1d\xe7\xc6\xc1\xf5\x45\xb3\x09\x0c\xf0\xcc\x9c\x33\xe7\xcc\x68\x2e\xcc\x7e\x6f\x34\x29\xe8\x9a\xf5\xec\xb7\xbc\x69\x9b\x05\x24\x05\xdf\x23\xf0\xc1\x22\x97\xaf\x80\x7f\x2a\xe7\x5d\x42\xc8\x5c\x0c\xa3\xf3\x68\x49\xba\xea\x9a\x96\xd5\x7d\xc6\x56\xac\x65\xfd\x1d\xcd\x57\x2c\x5b\x40\x22\xb8\x06\x6d\x3c\x48\x1c\xd0\x23\xc4\xe7\xa0\x34\x88\xd1\x5a\xd4\x1e\x9c\xe7\x1e\x13\x32\x17\x16\x25\x6a\xaf\xf8\x40\xde\x15\xe9\x6b\xd6\x94\x5d\x9d\xb2\x05\x24\x77\x5c\x0d\x28\xc1\x9b\x58\x6f\x06\xed\x0e\x2d\x82\x72\xc0\x35\x70\xe7\x8c\x50\xdc\xa3\x84\x9d\x71\x1e\x46\x2d\xd1\x82\xdf\x29\x07\xcf\xf8\x9a\x7c\x52\xb6\xff\xbd\x2c\x7e\xa8\xf6\x5f\x46\xe3\x95\xda\x77\xb4\x5b\xb5\x7d\x5a\xb3\x8c\x15\x6d\x4e\x57\x7d\x4a\x8b\xbe\x28\xdb\x38\x92\x05\x24\x19\x6e\xf9\x38\x78\x78\x53\x0a\x82\xeb\x30\x9d\x0d\xc6\xa6\x32\xcc\x34\x90\x27\xcb\xb2\x69\x7b\xba\xaa\x19\xcd\x1e\xdf\x5c\x58\x06\x5d\xdf\xba\x10\x75\x4d\x88\xf3\xe0\xaf\xca\x39\xce\x25\x28\x8a\x25\x2e\x64\xbd\x28\xbf\x03\xbf\x3b\x7b\x74\xad\x6e\xff\xe5\xb1\xaf\xea\xf2\x17\x96\xb6\xff\xab\xc5\xc1\x9a\x3f\x50\xf8\x84\x34\x8f\x4d\xcb\xd6\x7d\x5e\x4d\x93\xba\x2b\xbb\x22\x70\xaf\x06\xe4\x0e\x61\xab\x86\x21\x24\x25\x20\x06\x23\xf8\x00\x79\x05\x5b\x65\x9d\xff\xf7\x9f\xbf\xc3\xa0\x46\x87\x96\x54\xb4\x69\x7e\x2d\xeb\x6c\xaa\xb0\xa6\x6d\xba\x5c\x40\x12\x88\x1c\xb8\x73\x2f\xc6\xca\x40\x46\x69\x61\xac\x9d\x5a\x96\x75\x7e\x9f\x17\x74\xf5\xe1\xbd\xb1\xea\x49\x69\x3e\x7c\x06\xec\x1a\x56\xf7\x79\x33\xe1\x68\xda\xe6\x5f\x59\x04\x06\x1a\xe1\x6d\x70\x12\x35\xdf\x0c\x28\x67\x10\x35\x08\xa3\x3d\x17\x7e\xd2\xc0\xe5\x5e\x69\xe5\xbc\xe5\xde\xd8\x59\x2c\x78\xa9\xbb\x30\xe0\x46\xb1\x9b\x0a\x4e\x12\x69\xb6\xce\x8b\x8f\x41\x0a\x4d\x65\x0c\xd3\x54\xf4\x48\xe1\x43\x98\x66\xef\x49\xd7\x6c\x45\x5b\x96\x5d\x38\xd8\x05\xd8\x8e\x07\xea\x97\x3e\x45\x7b\xae\x50\xe8\xaa\x8c\xde\x46\x01\xa5\x3a\x32\x20\x64\x6e\xf1\x49\x19\x7d\xca\x53\xcd\xee\xf3\xb2\xb8\x75\xbb\xe1\x08\xfe\x5e\xa2\xc2\x52\x86\x48\x84\xff\xa7\x46\x61\xb1\x6f\x6e\x33\x6d\xf5\xf7\x62\x3b\x70\x1d\x9a\x98\x03\x6a\xe7\xb9\x78\x26\xf7\xac\x3d\xe9\x61\x75\x5d\xd6\x47\x13\x23\xe5\xad\x19\xf5\xb4\xd0\x71\x9e\x6b\xdc\x6f\xd0\x9e\x2d\xa1\x59\x76\x69\xc1\x06\x51\x03\x97\x12\x2f\x21\xe7\xbb\x12\x3d\xfb\xfc\xa8\x44\xc0\xb5\x8b\x72\xc2\x2e\x69\xd3\xc7\x3b\x1d\x96\x2c\x02\x2e\x84\xc6\xcd\x9f\x41\x7a\x25\x49\x84\xcc\xb5\x91\x48\x8a\x32\x63\xe7\xc3\x54\x77\x45\x91\x17\xf7\x7d\x4b\x9b\x87\x05\x24\x54\x4a\x08\x8f\xc0\xd8\xd3\xc5\x9f\x7e\x9e\x86\x6a\x47\xad\x95\x7e\xfa\xe9\x70\x5c\x8e\x17\xae\x3c\x28\x0f\xd2\x68\xfc\x39\xa8\xde\x70\xf1\x3c\x1e\xa8\x10\x66\xd4\x9e\x54\xb4\xa6\xeb\x9e\xad\xab\xf6\x71\x01\x49\xae\xdd\xb8\xdd\x2a\xa1\xc2\x47\xe3\xc0\x2d\xdf\xa3\x47\xeb\x12\x12\xc6\xd1\x74\x55\x55\xd6\x53\xa4\xb5\x1b\x0f\x07\x63\x83\x1e\xff\x7a\xc0\x84\xa4\x4b\x96\x3e\xbc\x1d\xc6\xaf\x68\xd5\x56\x09\xee\x27\x8b\xa6\x2c\x9c\x4f\xdd\x17\x9a\x3e\x74\x55\x4f\xd3\xb4\xec\x8a\x1f\x39\x7a\xef\x88\xdf\x7c\xfd\xc8\x3c\x24\xea\x9b\xef\xd2\x0d\xdd\x02\xea\xf6\x26\xd3\xdf\x7f\x01\x00\x00\xff\xff\xb3\xd1\xd7\xa9\xd5\x07\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 2005, mode: os.FileMode(420), modTime: time.Unix(1597141863, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x5d\x53\xdb\x46\x14\x7d\xd7\xaf\xf0\xd8\xaf\x9d\xfe\x00\xde\x36\xd2\x02\x2a\xb6\xa4\xd1\x47\x5b\xfa\xb2\xe3\x18\x4d\x4b\x03\x12\x63\xcc\x4b\x9f\x6a\x28\x60\x13\xbb\xa6\x89\x69\xa1\xf1\x14\xbb\x35\xc5\x93\xc4\x16\x81\x0c\x06\x84\xe9\x9f\xd1\xee\xca\x4f\xfc\x85\xce\x4a\xb6\x2a\x70\x99\xf8\x75\xe7\xde\x73\xce\x3d\x67\xef\x4d\xe5\xec\xd5\x55\xdb\xe2\x24\x90\x81\x08\x7e\x2d\x6a\xba\x36\x93\x48\xe2\xfd\x2a\x3d\x3d\xc3\xfd\x73\xdc\x3d\xc4\x8d\x4e\x92\xe3\x52\xb9\x95\x8d\xf5\x82\x99\xe7\xf8\xb4\xa1\xe9\x50\x45\x02\x4c\x43\x1d\xa2\x59\x20\xa6\xa1\x30\x93\x48\x92\xdf\x9a\xe4\xe2\x00\x97\x9a\xc3\xa3\x36\x1e\xbc\xc6\xe5\x2a\xdd\xbb\x24\x3f\x16\xe9\xef\x3f\x0d\xdf\xec\xd0\xbb\x76\x00\x92\x37\x97\x4c\xab\xb0\x9c\x5d\xe1\x1e\xf4\x23\x15\x6a\xb2\xa1\xf2\x90\x71\x87\x10\xed\x0f\xfe\xc7\x93\xfb\xdb\xa2\xef\x9c\xd0\xd3\xc3\xe1\xab\x13\xef\xea\x25\x69\x94\xf1\xf6\x85\x5f\xac\x7b\x57\x2e\x69\xdc\x24\x9f\x00\x41\xdf\xc8\xd2\xb4\x48\xb8\xe6\xd0\x7a\x07\x57\x02\xb0\x59\x60\xa4\x75\xc4\xab\x50\x80\x92\x2e\x82\x34\xe2\x81\x84\x24\x59\x1f\x0d\x3b\x93\x48\x0e\xdd\x43\xbf\xd7\xc6\xbb\x5d\x52\xed\x79\x57\x55\x7f\x6b\x10\x92\xdc\xdf\x16\xd9\x7c\xdf\xd9\xeb\x05\x6e\x5e\xd6\x74\x04\xd2\x2a\x04\xc2\xe2\x7f\x96\x86\x92\x63\x96\x8e\xb4\x07\xd5\x91\x8b\x93\x92\xa3\x3e\xea\xd6\x42\xc9\x63\x3b\x27\x01\xd0\xb3\x45\xa4\xa8\xf2\x17\x90\xd7\xa7\xc5\x6a\x5d\xd3\x37\xbd\x40\xbd\xb6\xa8\xe9\x30\x83\x44\x25\x98\x78\x56\x36\x24\x26\xc8\x77\xfa\x78\xbb\x84\x5b\xef\xf0\xce\x11\x69\xbc\x27\x8d\x1b\x51\x19\x0d\xbb\xb1\x6e\xe6\x39\x05\x68\xda\x57\xb2\x2a\x04\x4d\x19\xa0\xf3\xf3\x8c\xd9\xd9\xa1\xcd\xe2\xb0\x7e\xe4\x3b\x4e\x92\x93\x55\x71\x4e\x94\x40\xfa\x61\xc9\xcf\xc7\x0f\xab\x0c\x0d\xaa\x48\xd4\x82\x22\xc0\xeb\xe2\x97\xcc\x6e\x5a\xef\x90\x52\x9f\x34\xde\xe2\x7d\x16\x53\x30\x45\xdf\x2f\xd6\xe9\x85\x4b\x7b\x2d\xba\xbf\x83\x7f\x39\x0c\xd4\x04\xdd\x71\xdd\xec\x3b\x76\xdb\x61\x7f\x50\x01\x84\x8c\x28\x3d\x15\x68\x22\xbb\xb4\xba\x6c\x25\xc2\xf2\x30\x57\xff\xcf\x77\xb1\x68\xe3\xea\x54\x98\x06\x3a\x14\x62\x4e\x8f\x64\x9e\xb7\xa2\x6f\x15\xfa\xfa\x98\xd5\x50\x04\x10\xb0\x82\x09\x3a\xef\x9f\x1e\xa9\x5f\x87\xce\x72\xa9\xbc\xf9\xed\xb2\x6d\x8d\x13\x56\xe1\x9c\x28\x4b\x53\xad\x0a\xae\xdc\xe0\xe3\xe3\x78\xc2\xb1\x0f\xce\xa5\x7e\xb0\x2d\x73\x8c\xca\x96\x64\x3a\xcc\x31\xc2\x83\x8f\xb3\xd5\xa1\x83\x73\xbf\xd7\xc2\xa5\x57\x0c\xd9\x5e\x33\xad\xf5\x42\x36\xf7\x82\x9b\x83\xfa\x58\x31\x54\x55\x59\x65\x61\x94\xef\xbc\xab\x2a\x2e\x9d\x85\xf2\x58\xfd\x5a\xde\xfe\xde\xcc\x15\x32\xe6\xea\x73\x33\x1f\xd9\x0b\x04\x21\xb2\x33\x64\x23\x7d\x17\xef\x35\x63\x1d\xd1\x9a\x8e\xec\x7f\x2a\xd2\x30\x81\x89\x1d\x1d\x77\xcd\x03\x0d\x8d\x4e\x19\x6b\x09\x8a\xe3\xeb\x75\x7f\x5b\xfc\x9f\xfd\xb6\xec\x25\x93\x93\x64\x01\x46\xfb\xad\x1a\x92\x24\x4a\x73\x48\x07\xda\x02\x73\x6f\xfb\xd2\x73\x7f\xf5\xf7\x36\xe9\xe6\x35\x39\x38\x1b\xee\xd6\xc8\xeb\xaa\x37\x68\x90\xee\x5f\xb8\xd1\x21\xe5\x53\xbf\x55\xf9\x2c\xe1\x3b\x7d\xda\x2d\xe3\xbb\x6d\xdc\xdb\xf2\xdc\xf7\xe1\x33\xee\x55\x88\x73\xf0\x39\xa3\x79\x9e\xcd\xbd\xd8\x58\x03\xb9\x9c\xbd\x61\x15\x38\x05\xa8\x20\x83\x60\x46\xd1\x17\x19\x43\x6d\x93\x1c\x9c\x31\x6d\x97\x17\x49\x8e\x0d\xae\x19\x8a\x22\xab\x7a\x70\x63\xaa\xa4\xee\x90\x0a\x3b\xba\xf4\x83\x8b\xff\x78\x99\xe4\xf8\x79\xc8\x2f\xc4\xce\x74\xb3\x35\x7c\x5b\x89\xe2\x8d\xae\xc8\x33\xc0\x2f\x18\x0a\x02\x3c\x2f\x1b\xd2\xb4\xf7\x04\xb7\x77\x3d\x77\xe0\x7f\xfc\x1b\xd7\xfa\x4f\x5c\x15\x2e\xb5\xb6\x92\xb5\x1e\x1d\xea\x4f\xc0\xc6\xff\xd6\x24\x2c\x5b\x90\x7f\x03\x00\x00\xff\xff\x79\xf8\x7e\x19\xb6\x06\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 1718, mode: os.FileMode(420), modTime: time.Unix(1597141877, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
