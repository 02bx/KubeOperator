// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package i18n generated by go-bindata.// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x41\x6e\xeb\x36\x14\xdc\xf3\x14\xcf\xf2\xb6\xe8\x01\xbc\x23\x24\x26\x51\x2b\x4b\x02\x25\xb5\xfd\xdd\x08\x34\xf9\x12\xb3\x91\x49\x81\xa4\x90\xa6\xbb\xde\xab\x77\xea\x15\x0a\x4a\xb2\xeb\x22\x36\x92\x7a\x63\x08\xe0\xcc\x9b\x79\x6f\x66\x2b\xed\xe9\x64\x0d\x21\x5b\xe9\x50\xa1\x09\x5a\x0c\x24\x63\x05\x6b\x59\xff\x40\xf3\x82\x65\x3d\x67\x4d\xd5\xf1\x94\xed\x20\x79\x10\x7a\x40\x05\xc1\x82\xc2\x01\x03\x6e\xa0\x3d\xa2\x43\xd0\x1e\x84\x01\xe1\xbd\x95\x5a\x04\x54\x70\xb4\x3e\xc0\x64\x14\x3a\x08\x47\xed\xe1\x15\xdf\x93\x3b\xb4\xfd\xaf\x55\xf9\xbf\xb8\xff\xb0\x06\x6f\x70\x3f\xd0\xae\x68\xfb\x94\xb3\x8c\x95\x6d\x4e\x8b\x3e\xa5\x65\x5f\x56\x6d\xbf\x8c\xdd\x41\x92\xe1\xb3\x98\x86\x00\xff\x3a\x05\x29\x8c\xb1\x01\x0e\xb8\x0e\x55\x09\x21\xdb\x28\x9e\x3c\x55\x4d\xdb\xd3\x82\x33\x9a\x7d\xeb\xd9\x2f\x79\xd3\x36\x3b\x48\x9e\xa2\x2f\x31\x38\x14\xea\x1d\xf0\x77\xed\x83\xbf\xf8\x9a\x11\x8b\xb9\x7b\x76\x96\xbd\x44\x47\x2b\xc5\x95\xad\x37\x1d\x8e\x10\x8e\x08\x72\x98\x7c\x40\x17\x95\x4c\x1e\x1d\xa9\x69\xd3\xfc\x5c\xf1\x6c\x36\xb3\xa7\x6d\xfa\xb4\x83\x24\x92\x8d\xc2\xfb\x37\xeb\x54\x24\xd4\x46\x5a\xe7\x50\x86\x84\x54\x3c\x7f\xcc\x4b\x5a\x7c\x78\x6f\x9d\x7e\xd1\x46\x0c\xf7\x80\x5d\xc3\x78\x9f\x37\x33\x8e\xa6\x6d\xfe\x13\x5b\x81\x51\x46\x7c\x1b\x57\x85\x46\x1c\x06\x54\x1b\xa8\x07\x14\x1e\x41\x5a\x13\x84\x0c\xb3\x72\xa1\x4e\xda\x68\x1f\x9c\x08\xd6\x6d\x56\xc2\xc8\xf6\x50\x75\x65\x5c\x4a\x69\xc1\x4f\xf2\x38\x13\xfe\xfd\xd7\x9f\x09\xa1\xd9\x3e\x2f\x3f\x5e\x2a\x0e\x55\xeb\xb5\x66\xd2\x45\xc2\x87\x6b\x6d\xfe\x2b\x9a\xb3\x82\xb6\x2c\xeb\x6b\x5e\xfd\xc0\xd2\x76\x07\x49\x17\x61\x47\x11\xa5\x5f\xef\x7a\x74\xf6\x37\x94\xe1\x86\x84\xae\xce\xe8\xd7\x24\xa0\xd2\x8b\x02\x42\xb6\x0e\x5f\xb4\x35\xe7\x20\x70\xf6\x98\x57\xe5\x57\xeb\x03\x0b\xf8\xb3\x54\xc4\xd4\xc7\x48\xc4\xff\xf3\xa0\xd8\x9c\x2f\x8f\x99\x6b\xf3\xc9\x90\x71\x10\x26\x0e\xb1\x23\x1a\x1f\x84\x7c\x25\x8f\xac\x3d\xfb\x61\x9c\x57\x7c\x39\xe2\x2a\xf9\xd9\x4e\x66\x6e\xcc\xba\xcf\x3d\x9e\x0e\xe8\x2e\x27\xa1\x59\x76\x7d\x82\x03\xa2\x01\xa1\x14\x5e\x43\x2e\xc5\x5d\x6f\x76\xbf\xb5\x2b\xe0\x56\x65\xcf\xd8\x27\xda\xf4\x69\xd1\x35\x2d\x8b\x3a\xeb\x15\x70\x65\x74\xad\xd6\x06\xd2\x1b\x49\x22\x64\x6b\xac\x42\x52\x56\x19\xbb\x34\x9f\x77\x65\x99\x97\x8f\x7d\x4b\x9b\x1f\x77\x90\x50\xa5\x20\x3e\x02\xeb\x56\xe4\xf2\x79\x5e\xaa\x9b\x8c\xd1\xe6\xe5\xbb\x71\x29\xc7\x9b\xd0\x01\x74\x00\x65\x0d\x7e\x1f\x5d\x1f\x84\x7c\x9d\x46\x2a\xa5\x9d\x4c\x20\x35\xe5\x74\xdf\xb3\x7d\xdd\x7e\xdb\x41\x92\x1b\x3f\x3d\x3f\x6b\xa9\xd1\x04\x18\x85\x13\x27\x0c\xe8\x7c\x42\xe2\x3a\x9a\xae\xae\x2b\x3e\x47\xda\xf8\x69\x1c\xad\x8b\x7e\xc2\xfb\x18\x43\x11\x7f\xff\x04\x00\x00\xff\xff\xdb\x9a\xc5\x7a\xc9\x05\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 1481, mode: os.FileMode(420), modTime: time.Unix(1596445363, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x4f\x53\xdb\x46\x1c\xbd\xef\xa7\xf0\xc8\xd7\x4e\x3f\x00\xb7\x1d\x6b\x31\x6a\x65\xc9\xb3\x92\xda\xd2\x8b\xc6\x18\x4d\x4b\xa9\x25\xc6\x98\x4b\x6f\x86\x02\x36\xd8\x35\x25\x26\x31\xc1\x13\xec\xc4\x0c\x9e\x24\x96\xf8\x93\xc1\x06\x01\xf9\x32\xda\x95\x7c\xe2\x2b\x64\x56\x8a\x1d\x13\x60\x86\xeb\xce\xfb\xbd\xf7\xf6\xbd\xdf\x2f\x9e\xb5\x72\x39\xcb\x04\x20\x9e\xcd\x1b\xf3\x86\x59\x58\xc8\xfc\x0d\x78\x24\x22\x15\xe9\xd3\x50\x10\x11\xaf\x63\xa4\xc8\x1a\x4e\xa0\xa9\x18\x47\x4a\xad\xe1\x7e\x87\x74\x4e\x83\x4f\x47\x77\xd7\xc5\xc0\x39\xf2\x8f\x1b\xc3\xdd\x23\x6f\xb0\x4d\x9b\x65\xb2\x7e\x1e\x14\xeb\xde\xc0\xa5\xcd\x2b\xee\x09\x12\xfd\x77\x59\x7a\x2e\x13\xa9\x39\x7e\xbd\x4b\x2a\x21\xd9\x34\xd4\x44\x55\x4f\x60\xc4\x23\x49\x15\xa0\xa8\x27\xa0\xa4\x4b\xb2\xaa\x47\x3a\x53\x31\x6e\xe8\x36\x02\xbb\x43\x36\x7b\xb4\x6a\x7b\x83\x6a\xb0\x76\x13\x89\xdc\x5d\x17\x39\x00\xe2\x7f\x5a\xcb\x05\x30\x23\x2b\xaa\x0e\x45\x8c\x20\x3f\xab\xa3\xdf\x04\x45\x55\xa6\x62\x5c\x64\x99\xf4\xcf\x48\xaf\x41\x9a\xdd\xb1\xf7\x10\x1d\x7d\xe0\x51\xcb\xe3\x39\xdf\xad\x45\x96\x87\x07\x1b\xfe\x6d\x87\xc9\xad\x2c\x1b\x79\x90\x86\x8a\xf2\xab\x8c\xf9\xd0\x68\x0a\xaa\x89\x19\xc6\xe3\x6c\xf8\xad\xe2\xb0\xbe\x1f\x38\x0e\x07\x64\x2c\x24\x05\x09\x8a\xf7\x21\xff\x1d\xde\x47\x69\x0a\xc2\xba\xa0\x84\x20\x98\x50\x85\x5f\xd8\x87\xfd\x7a\x97\x96\xfa\xb4\xf9\x9e\xec\xb0\xa0\x42\x4f\xfd\xa0\x58\xf7\xcf\x5d\xdf\x6e\xfb\x3b\x1b\xe4\xff\x46\xf8\xf9\x70\x9a\x8d\x4e\xcb\x9a\xc4\xbe\x42\x5f\xb5\x68\xaf\x13\xcd\x87\x08\xc8\xa7\x04\xe9\xa9\x48\x63\x99\xf9\xdc\x82\x19\x8b\xe0\x51\xb2\xc1\xdb\x0f\x13\xe1\x4e\xba\xc3\x48\x84\x2a\xe2\xf5\x34\x96\x7f\x42\x09\xf5\x9b\xcd\xb3\xf6\xb8\xd8\x61\xfb\xd2\x3f\xb0\xbf\x57\xd5\xd2\x3c\x0c\x55\xe1\x03\x39\xef\xb3\x4d\xeb\x97\x51\x91\x20\x9e\x37\xfe\x58\xb0\xcc\x51\x49\x18\x25\x05\x59\x7a\xd6\xb2\x92\xca\x15\x39\x3c\x9c\xec\x6b\x62\xc5\x40\xfc\x1f\xcb\x34\x46\xac\x6c\x4d\x9f\xc7\x39\x62\xb8\xb7\x06\x6b\x5d\xff\xe6\x2c\xb0\xdb\xa4\xb4\xcb\x98\xad\x25\xc3\x5c\x2e\x64\xb2\x8b\x20\x89\xd4\x91\x63\x84\xb1\x8c\x59\x19\xe5\x5b\x6f\x50\x25\xa5\x93\xc8\x1e\xc3\x2f\xe5\xad\xbf\x8c\x6c\x21\x65\xe4\xe6\x8c\xfc\x38\x5e\xc8\xf3\xe3\x38\x23\x35\xda\x77\xc9\x56\x6b\x62\x62\x7c\x28\x5f\xe3\x7f\xaa\xd2\xa8\x81\x07\x57\x32\x9a\x9a\x81\x8a\x9e\x10\x35\x45\x45\xcc\x60\x04\x9e\x5c\xf0\xbb\xeb\xe2\x23\x17\x66\x5a\xf3\x06\x90\x64\x1e\x8d\x2f\x0c\x6b\x92\x24\x48\x49\x5d\x85\xca\xcf\x2c\xbd\xf5\x0b\xcf\x7d\x19\x6c\xad\xfa\xab\x97\x74\xef\x64\xb8\x59\xa3\x2f\xaa\xde\x4d\x93\xf6\xde\x91\x66\x97\x96\x8f\x83\x76\xe5\x87\x58\xe0\xf4\xfd\x5e\x99\xdc\xae\x13\x7b\xcd\x73\x3f\x46\xcf\xc4\xae\x50\x67\xef\x47\x26\x33\x97\xc9\x2e\xae\x2c\xc1\x6c\xd6\x5a\x31\x0b\x20\x0d\x31\x4c\xe9\x28\x95\x56\x67\x99\x42\x6d\x95\xee\x9d\x30\x6f\x17\xe7\x1c\x60\x1f\x57\xb4\x74\x5a\xc6\x6a\x78\xe5\x55\x5a\x77\x68\xa5\xe8\xbf\xfe\xd7\x3f\x75\xc9\x9b\x6d\x0e\x80\x2f\x01\x00\x00\xff\xff\x63\x0d\x53\xe7\x00\x05\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 1280, mode: os.FileMode(420), modTime: time.Unix(1596445372, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
