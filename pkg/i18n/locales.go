// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package i18n generated by go-bindata.// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x4d\x6e\xf3\x36\x10\xdd\xf3\x14\x63\x79\x5b\xf4\x00\xde\xb1\x12\x13\xab\x9f\x2c\x09\xfa\xf9\xda\x74\x23\xd0\xe4\x38\x66\x23\x93\x02\x49\x21\x4d\x77\xbd\x57\xef\xd4\x2b\x14\x94\xe4\x7c\x6e\x63\x23\x2e\xea\x8d\x21\x80\xef\xcd\x7b\x33\x6f\x66\x2d\xcc\xe9\x64\x34\x21\x6b\x61\x51\xa2\xf6\x8a\xf7\x24\x61\x19\x6b\x58\xf7\x40\xd3\x8c\x25\x5d\xc5\xea\xa2\xad\x62\xb6\x81\xe8\x81\xab\x1e\x25\x78\x03\x12\x7b\xf4\xb8\x82\xe6\x88\x16\x41\x39\xe0\x1a\xb8\x73\x46\x28\xee\x51\xc2\xd1\x38\x0f\xa3\x96\x68\xc1\x1f\x95\x83\x17\x7c\x8b\x6e\xd0\x76\xbf\x14\xf9\x7f\xe2\xfe\xdd\x68\xbc\xc2\xfd\x40\xdb\xac\xe9\xe2\x8a\x25\x2c\x6f\x52\x9a\x75\x31\xcd\xbb\xbc\x68\xba\xb9\xec\x06\xa2\x04\x0f\x7c\xec\x3d\x7c\x73\x0a\x82\x6b\x6d\x3c\xec\x71\x29\x2a\x23\x42\xd6\x41\x3c\xd9\x16\x75\xd3\xd1\xac\x62\x34\x79\xea\xd8\xcf\x69\xdd\xd4\x1b\x88\xb6\xc1\x17\xef\x2d\x72\xf9\x06\xf8\x9b\x72\xde\xbd\xfb\x9a\x10\xb3\xb9\x5b\x76\xe6\xbe\x04\x47\x0b\xc5\x85\xad\x57\xe5\x8f\xe0\x8f\x08\xa2\x1f\x9d\x47\x7b\x8d\xb7\xfb\xe1\xa9\x2b\xab\xe2\x47\x16\x37\xff\xab\xc4\x60\xcd\xaf\x28\x7c\x30\x3b\x3a\xb4\xa4\xa4\x75\xfd\x53\x51\x25\x53\xbf\x76\xb4\x89\xb7\x1b\x88\x02\xd9\xc0\x9d\x7b\x35\x56\x06\x42\xa5\x85\xb1\x76\x82\x15\x55\xfa\x98\xe6\x34\xfb\xf0\xde\x58\xf5\xac\x34\xef\x6f\x01\xdb\x9a\x55\x5d\x5a\x4f\x38\x1a\x37\xe9\x57\xb6\x00\x83\x8c\xf0\x36\x4c\x03\x35\xdf\xf7\x28\x57\x50\xf6\xc8\x1d\x82\x30\xda\x73\xe1\x27\xe5\x5c\x9e\x94\x56\xce\x5b\xee\x8d\x5d\x2d\x84\x81\xed\xa1\x68\xf3\xd0\xf7\xdc\x80\x1b\xc5\x71\x22\xfc\xeb\xcf\x3f\x22\x42\x93\x5d\x9a\x7f\x0c\x43\x28\x2a\x97\x40\x4c\xa4\xb3\x84\x0f\x81\x58\xfd\x53\x74\xc5\x32\xda\xb0\xe4\x62\x0a\x6d\x80\x1d\x79\x90\x7e\xd9\xeb\xa5\xc5\x57\x24\xb4\x65\x42\xef\x93\x80\x52\xcd\x0a\x08\x59\x5b\x7c\x56\x46\x9f\x33\x51\xb1\xc7\xb4\xc8\xef\xdd\x50\x98\xc1\x9f\xa5\x22\x2c\x56\x88\x44\xf8\x3f\x17\x0a\xcb\x79\x77\x99\x69\x33\x3f\x8b\x5e\xcf\x75\x28\x62\x06\xd4\xce\x73\xf1\x42\x1e\x59\x73\xf6\xc3\xaa\xaa\xa8\xe6\x21\x2e\x92\x0f\x66\xd4\xd3\x52\x2e\xfd\xdc\xe1\x69\x8f\xf6\x7d\x24\x34\x49\x2e\x47\xb0\x47\xd4\xc0\xa5\xc4\x4b\xc8\xfb\x6d\x58\x66\x76\xfb\x30\x2c\x80\x6b\x57\xe1\x8c\xdd\xd2\xba\x8b\xb3\xb6\x6e\x58\xd0\x59\x2e\x80\x0b\xa3\xcb\xf6\xae\x20\xbe\x92\x24\x42\xd6\xda\x48\x24\x79\x91\xb0\xf7\xe3\x52\xb5\x79\x9e\xe6\x8f\x5d\x43\xeb\x2f\x1b\x88\xa8\x94\x10\x1e\x81\xb1\x0b\x72\xfe\x3c\x37\xd5\x8e\x5a\x2b\xfd\xfc\xdd\x30\x2f\xc7\x2b\x57\x1e\x94\x07\x69\x34\x7e\x1f\x5c\xef\xb9\x78\x19\x07\x2a\x84\x19\xb5\x27\x25\xad\xe8\xae\x63\xbb\xb2\x79\xda\x40\x94\x6a\x37\x1e\x0e\x4a\x28\xd4\x1e\x06\x6e\xf9\x09\x3d\x5a\x17\x91\xd0\x8e\xba\x2d\xcb\xa2\x9a\x22\xad\xdd\x38\x0c\xc6\x06\x3f\xfe\x6d\xc0\x88\xc4\x5b\x16\x7f\xf9\x76\xdc\xbe\xa2\x55\x07\x25\xb8\x9f\x46\x34\x65\x61\x6a\x78\xcf\xf5\xbf\xae\xfc\x1d\x07\x2b\xa0\xee\x3f\x58\xe1\xf7\x77\x00\x00\x00\xff\xff\x39\x69\x17\xc8\xb5\x06\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 1717, mode: os.FileMode(420), modTime: time.Unix(1596624262, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xcd\x72\xda\x56\x18\xdd\xdf\xa7\x60\xc4\xb6\xd3\x07\xf0\xee\x56\xba\x06\x35\x42\x62\xae\xa4\xb6\xee\x46\x43\xb0\xa6\x75\x13\x24\x0f\xc6\x9b\xee\xb0\x6b\x07\x12\x28\x69\x8a\x5b\xd2\x30\x35\xb4\x78\xc2\xa4\x45\xf2\x4f\xc7\x60\xcb\x76\x5f\x46\xf7\x4a\xac\xfc\x0a\x1d\x49\xa0\xca\x36\xce\xb0\xd5\x9c\xef\x9c\xa3\x73\xbe\xef\xa6\x8b\x66\xa9\x64\x1a\x00\xa4\x8b\x65\x7d\x5d\x37\x2a\x1b\x85\xe7\x80\x43\x02\x52\x90\xb6\x0a\x79\x01\x71\x1a\x46\xb2\xa4\x62\x16\xad\xa4\x18\x52\xeb\x4d\xdf\x0e\xc8\xe0\xc4\xff\xe7\xe8\xf6\xaa\xea\xdb\x47\xde\xfb\xce\xf4\xcd\x91\x3b\x79\x45\xbb\x75\xb2\x77\xe6\x57\xdb\xee\xc4\xa1\xdd\x4b\xe6\x11\x12\xed\x6b\x49\x5c\x96\x89\xb4\x6c\xaf\x3d\x24\x8d\x90\x6c\x15\xaa\x82\xa2\xb1\x18\x71\x48\x54\x78\x28\x68\x2c\x14\x35\x51\x52\xb4\x48\x67\x25\xc5\x4c\x9d\x8e\x6f\x0d\xc8\x8b\x11\x6d\x5a\xee\xa4\xe9\xef\x5e\x47\x22\xb7\x57\x55\x06\x80\xf4\xb7\xe6\x56\x05\x64\x25\x59\xd1\xa0\x80\x11\xe4\xd6\x34\xf4\x15\x2f\x2b\xf2\x4a\x8a\x89\x2c\x93\xf1\x29\x19\x75\x48\x77\x18\x7b\x0f\xd1\xd1\x0f\x2c\xb4\x1c\xcf\x79\x4e\x2b\xb2\x3c\x7d\xb7\xef\xdd\x0c\x16\x11\x68\x9f\xad\x69\x79\x2c\x7d\x8e\x58\x65\x59\xae\xfe\x85\xf7\xce\x9a\xb9\xdf\xde\xd2\xcb\x20\x0f\x65\xf9\x4b\x09\x73\xe1\x7f\xe7\xa0\xc2\x66\x03\x2a\x7b\xdf\xeb\x55\xa7\xed\xb7\xbe\x6d\x33\x40\xc2\x7c\x86\x17\xa1\x70\x17\xf2\xe3\xe1\x5d\x94\x2a\x23\xac\xf1\x72\x08\x82\xac\xc2\x7f\x11\xe4\xe7\xb5\x87\xb4\x36\xa6\xdd\x0f\xe4\x75\x90\x7b\x68\x6b\xec\x57\xdb\xde\x99\xe3\x59\x7d\xef\xf5\x3e\xf9\xa9\x13\xba\x09\xa7\x83\xd1\x55\x49\x15\x83\x64\xe8\xaf\x3d\x3a\x1a\x44\xf3\x21\x02\x72\x39\x5e\x7c\xac\xa1\x54\x61\xbd\xb4\x61\xa4\x22\x78\x54\x94\xff\xc7\x5f\x89\xae\x92\xee\x30\x12\xa0\x82\xb8\x44\x74\x33\x9b\xa7\xfd\x78\x4f\xa2\xa0\xee\xab\xaa\x79\x0e\x86\xaa\xf0\x81\x9c\xfb\xaf\x45\xdb\x17\x51\xb2\x20\x5d\xd6\xbf\xd9\x30\x8d\x79\x65\x18\x65\x78\x49\x5c\x6a\xf7\x49\xe3\x92\x1c\x1e\x26\x2b\x4b\x6c\x2c\x48\x7f\x6f\x1a\xfa\x9c\x35\xd8\xfa\xe5\x38\xe7\x0c\x77\x36\x61\x77\xe8\x5d\x9f\xfa\x56\x9f\xd4\xde\x04\xcc\xe6\xa6\x6e\x6c\x55\x0a\xc5\x67\x20\x83\x94\xb9\x63\x84\xb1\x84\x83\x32\xea\x37\xee\xa4\x49\x6a\xc7\x91\xbd\x00\xbf\x59\x36\xbf\xd3\x8b\x95\x9c\x5e\x7a\xaa\x97\xe3\x78\x21\xc7\xc5\x71\x46\x6a\x74\xec\x90\x97\xbd\xc4\x44\x7c\x77\xb3\xf8\x1f\xab\x34\x6a\xe0\xc1\xd1\xcd\xa7\xb2\x50\xd6\x58\x41\x95\x15\x14\x18\x8c\xc0\xc9\x7b\xb9\xbd\xaa\x2e\x38\x58\xc3\x5c\xd7\x81\x28\x71\x28\x3e\x58\xac\x8a\x22\x2f\x66\x34\x05\xca\x4f\x82\xf4\xf6\xce\x5d\xe7\x17\xff\xe5\x8e\xb7\x73\x41\x0f\x8e\xa7\x2f\x5a\xf4\xe7\xa6\x7b\xdd\xa5\xa3\x3f\x49\x77\x48\xeb\xef\xfd\x7e\xe3\x93\x94\x6f\x8f\xbd\x51\x9d\xdc\xec\x11\x6b\xd7\x75\xfe\x8e\x3e\x13\xab\x41\xed\x83\x4f\x03\x99\xa7\x85\xe2\xb3\xed\x4d\x58\x2c\x9a\xdb\x46\x05\xe4\x21\x86\x39\x0d\xe5\xf2\xca\x5a\xa0\xd0\xda\xa1\x07\xc7\x81\xb7\xf3\x33\x06\x04\x3f\x2e\xab\xf9\xbc\x84\x95\xf0\xd1\x68\xd2\xb6\x4d\x1b\x55\xef\xb7\x1f\xbc\x13\x87\xfc\xfe\x8a\x01\x6c\x16\xb1\x4f\xfe\x7f\x31\x68\xaf\x3f\xfd\xd0\x88\xeb\x0d\x83\x7d\x5e\x30\xee\x3d\x8d\x0b\x1e\x86\x64\xe1\x1f\xdb\x8b\xd9\xe2\x03\xf0\x5f\x00\x00\x00\xff\xff\xf2\x53\x43\xaf\xc7\x05\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 1479, mode: os.FileMode(420), modTime: time.Unix(1596624254, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
