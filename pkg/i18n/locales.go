// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package i18n generated by go-bindata.// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x4d\x72\x9b\x3e\x14\xdf\x73\x8a\x67\x72\x0b\xef\x34\x20\xc7\xfc\x87\x80\x47\x88\x7f\x3f\x36\x8c\x2c\xbd\x04\x35\x58\xf2\x48\x62\xd2\x74\xd7\x7b\xf5\x4e\xbd\x42\x47\x80\x53\xcf\xd8\x9e\xa4\x2b\x36\xfc\xbe\x9f\xee\xa4\x3d\x1c\xac\x49\x92\x3b\xe9\x50\xa1\x09\x5a\x0c\x49\x4e\x4b\xca\x69\xb7\x21\x45\x49\xf3\x8e\xd1\xa6\x6e\x59\x46\xd7\x90\x6e\x84\x1e\x50\x41\xb0\xa0\x70\xc0\x80\x2b\xe0\x3d\x3a\x04\xed\x41\x18\x10\xde\x5b\xa9\x45\x40\x05\xbd\xf5\x01\x46\xa3\xd0\x41\xe8\xb5\x87\x67\x7c\x4d\x6f\xd0\x76\x5f\xeb\xea\x9f\xb8\x7f\x58\x83\x57\xb8\x37\xa4\x2d\x79\x97\x31\x9a\xd3\x8a\x17\xa4\xec\x32\x52\x75\x55\xcd\xbb\x59\x76\x0d\x69\x8e\x8f\x62\x1c\x02\xfc\x4d\x0a\x52\x18\x63\x03\xec\x71\x11\x55\x69\x92\xdc\x45\xf3\xc9\xb6\x6e\x78\x47\x4a\x46\x49\xfe\xa5\xa3\x9f\x8b\x86\x37\x6b\x48\xb7\x31\x97\x18\x1c\x0a\xf5\x0a\xf8\x5d\xfb\xe0\xdf\x72\x4d\x88\x39\xdc\xad\x38\x73\x2f\x31\xd1\x42\x71\x16\xeb\x45\x87\x1e\x42\x8f\x20\x87\xd1\x07\x74\xd1\xc9\xe8\xd1\x25\x3b\xd2\x34\x9f\x6a\x96\x4f\x61\x1e\x08\xcf\xb6\x6b\x48\x23\xd9\x51\x78\xff\x62\x9d\x8a\x84\xda\x48\xeb\x1c\xca\x90\x26\x35\x2b\xee\x8b\x8a\x94\x17\xff\x5b\xa7\x9f\xb4\x11\xc3\x2d\x60\xdb\x50\xd6\x15\xcd\x84\x23\x19\x2f\xfe\xa7\x0b\x30\xda\x88\xff\xc6\xaa\xd0\x88\xfd\x80\x6a\x05\xbb\x01\x85\x47\x90\xd6\x04\x21\xc3\xe4\x5c\xa8\x83\x36\xda\x07\x27\x82\x75\xab\x85\x30\xb2\x6d\xea\xb6\x8a\xa5\x54\x16\xfc\x28\xfb\x89\xf0\xf7\xaf\x9f\x69\x42\xf2\x87\xa2\xba\x5c\x2a\x8a\xaa\x65\xad\x89\x74\xb6\x70\xb1\xd6\x2a\x96\xe4\xf0\x49\x5b\x73\x5a\x81\xd1\xfb\xa2\xae\x3e\x7a\xbb\x30\x83\xdf\x9b\x24\x9e\x5c\x94\x8a\xdf\x93\x50\x3c\xdb\x0f\xcb\x4c\x37\xfb\x8e\xc8\x71\x10\x26\x8a\xd8\x23\x1a\x1f\x84\x7c\x4e\xee\x29\x3f\xe5\xa1\x8c\xd5\x6c\x6e\x70\xb1\xfc\x68\x47\x33\x9d\xeb\xd1\xd9\x6f\x28\xc3\x03\x1e\xf6\xe8\xde\x46\x24\x79\x2c\xbc\x8d\xb5\xf5\xc2\xc3\x1e\xd1\x80\x50\x0a\xcf\x21\x6f\xaf\x66\xc7\xea\xff\x68\xc6\x6f\x3f\x99\x05\x70\xed\xbd\x9c\xb0\x5b\xd2\x74\x59\xd9\x36\x9c\x46\x9f\xbb\x05\x70\x16\x74\xb9\xeb\x15\x64\x57\x66\xfc\x13\x00\x00\xff\xff\x13\x17\x93\x55\x88\x04\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 1160, mode: os.FileMode(420), modTime: time.Unix(1596003914, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xcf\x6e\xda\x4c\x14\xc5\xf7\x7e\x0a\x64\xde\x82\xdd\xc8\x1e\xc0\x9f\x8c\x1d\x8d\x87\xaf\x7f\x36\x23\x4a\xac\x96\xb6\xd8\x11\xd0\x4d\x77\x56\x54\x4a\xda\xd0\xa4\x11\x52\x89\x82\x04\x54\xa0\xa2\x56\x40\x9b\x54\x82\x06\x92\xa7\x61\x3c\xf6\x8a\x57\xa8\xc6\x23\x10\x28\x45\x62\x7f\xce\xb9\xbf\x7b\xee\x8d\xe7\xdd\x62\xd1\x75\x24\x29\x9e\x2f\xd9\x87\xb6\x53\x29\xe4\x5e\x4b\x2a\xd4\x21\x86\x24\x09\x34\x1d\xaa\x04\x41\xcb\xcc\x22\x05\x26\x62\x32\xad\x75\xc2\xcb\x1e\xed\xfd\x0a\x7e\xf7\x97\x73\x2f\x18\xf7\xd9\xb7\x66\x78\xd1\x5f\x4c\x3f\xfa\xad\x13\xfa\xee\x26\xf0\x1a\x8b\xe9\xcc\x6f\xdd\xca\x3b\x42\xc8\x53\xd3\xd8\x37\x89\x9e\x8d\x59\x63\x40\x4f\xa3\xb0\x24\xc8\xea\x98\x28\x08\xaa\xd0\xc0\x1a\xd0\x89\x02\x0c\x62\x98\x98\x88\x39\x89\x98\x1c\xce\x9a\xc1\xa8\x47\xdf\x0f\xfd\xfa\x68\x31\xad\x07\xc7\x77\x62\xc8\x72\xee\xc9\x92\x14\x7f\xe1\x96\x2b\x52\xda\xb4\x30\x01\x3a\x82\x40\x7d\x42\xe0\x63\xcd\xc2\x56\x22\x26\x0b\x64\x3a\xb9\xa6\xc3\x26\x6d\x0d\xd6\xec\x91\x5a\x2c\xf0\x4f\xe4\xb5\x8f\xcd\xce\x04\x72\x78\x55\x65\xf7\x3d\x3e\xee\x4d\xd9\x2e\x49\x07\xc0\xb2\x1e\x99\x48\x8d\x40\x33\x00\x2b\x69\x9e\x33\xae\xb2\x8e\x17\x36\x2e\x83\xf1\x58\x96\x4c\xa4\xa5\x34\x03\xe8\xdb\x92\x4f\xed\x6d\x55\xd6\x82\x88\x68\x56\x24\x02\x0a\xd6\xfe\xe7\x0b\xb3\xc6\xc0\xaf\x4d\xfc\xd6\x77\x7a\xce\x8b\x8a\x98\x26\x81\xd7\x60\x37\x33\x36\xea\xb2\xf3\x2a\xfd\xdc\x8c\x96\x8f\xdc\xdc\x9a\x34\xb3\x06\x5f\xc5\xff\xd2\xf1\x87\x3d\xe1\x8f\x14\x40\xcd\x68\xc6\xae\x4a\x63\xb9\xc3\x62\xc1\x89\x09\xb9\x68\x36\xf8\xfa\x63\xab\xdc\x92\xfd\xbc\xe0\x3a\xab\xde\x10\x4c\x69\xa6\xb1\xd7\xff\xd0\xd3\x5b\xda\x6e\x6f\x56\xb8\x71\x75\x29\xfe\xd6\x75\xec\x55\x2a\xff\x9c\xfd\x32\x57\x09\x5b\x97\x39\x1e\xb0\xbb\xeb\x60\xd4\xa5\xb5\x0b\x9e\xec\x1e\xd9\x4e\xb9\x92\xcb\xbf\x92\x52\x10\xaf\x88\x21\x42\x26\xe2\xfd\x9c\xdc\x2f\xa6\x75\x5a\xfb\x29\xf0\xb8\xfe\xa8\xe4\xbe\xb4\xf3\x95\x8c\x5d\x7c\x66\x97\xd6\xf7\x00\xaa\xba\x3e\x84\x98\xe6\x4f\x66\xf4\x43\x67\xc3\xb1\xfe\xdd\x03\x64\xfe\x07\x15\xbc\xab\xe5\xb0\xfb\x87\x5d\x3d\x7c\xdc\x95\x2b\x0d\x2c\xa2\xe8\x59\x0b\x43\x0e\x28\xc4\x9b\x3f\xb7\x9c\x7b\x0f\xbc\x7f\x03\x00\x00\xff\xff\xda\xe3\xa9\xce\xdd\x03\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 989, mode: os.FileMode(420), modTime: time.Unix(1596003889, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
