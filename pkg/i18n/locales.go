// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package i18n generated by go-bindata.// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x4d\x6e\xf3\x36\x10\xdd\xeb\x14\x13\x79\x5b\xf4\x00\xde\x31\x12\x93\xa8\x91\x25\x41\x3f\x69\xd3\x8d\x40\x53\x63\x9b\x8d\x4c\x0a\x24\xd5\x34\xdd\xf5\x5e\xbd\x53\xaf\x50\x50\xa6\x65\x27\x71\x90\x04\xdf\x2a\x08\xa0\x37\xf3\xde\x9b\x99\x47\x2f\xb8\xda\xef\x95\x0c\x32\xb2\xa2\x2d\xfd\x2d\xa9\xea\x6a\x09\x61\xc6\xf6\x08\xac\xd7\xc8\xba\x17\xc0\xbf\x84\xb1\x26\x0c\x82\x05\xef\x47\x63\x51\x07\x51\xda\x54\x35\x2d\xdb\x98\xa6\xb4\xa6\xed\x0d\x49\x52\x1a\x2f\x21\xe4\x4c\x82\x54\x16\x3a\xec\xd1\x22\xf8\xcf\x41\x48\xe0\xa3\xd6\x28\x2d\x18\xcb\x2c\x86\xc1\x82\x6b\xec\x50\x5a\xc1\xfa\xe0\x55\x91\xb6\xa4\x55\xde\x94\x11\x5d\x42\x78\xc3\x44\x8f\x1d\x58\xe5\xeb\x5d\x41\xbd\x43\x8d\x20\x0c\x30\x09\xcc\x18\xc5\x05\xb3\xd8\xc1\x4e\x19\x0b\xa3\xec\x50\x83\xdd\x09\x03\x4f\xf8\x12\x7e\x50\xb6\xfd\x3d\xcf\xbe\x55\xfb\x6f\x25\xf1\x42\xed\x1b\xd2\xa4\x75\x1b\x95\x34\xa6\x59\x9d\x90\xb4\x8d\x48\xd6\x66\x79\xed\x2d\x59\x42\x18\xe3\x86\x8d\xbd\x85\x93\x52\xe0\x4c\x3a\x77\xd6\xe8\x9b\x76\xce\x53\x47\x3e\xb8\xcb\xab\xba\x25\x69\x49\x49\xfc\x78\x9a\xc2\x9d\xd3\xf5\x76\x0a\x5e\xd7\x84\x98\x8d\xbf\x28\xe7\xe0\x8b\x53\xe4\x4b\x9c\xc9\x7a\x16\x76\x07\x76\x37\xcf\xe8\x52\xdd\xf6\xfa\xb1\x2d\xca\xfc\x17\x1a\xd5\x3f\xd4\x62\xd0\xea\x0f\xe4\x36\x0c\xaa\xc7\xaa\xa6\xab\x36\x29\x26\xa7\x6e\xf2\x26\x73\xdc\x8b\x1e\x99\x41\xd8\x88\xbe\x77\x9b\xe2\x10\xbd\xe2\xac\x87\xa4\x80\x8d\xd0\xc6\xfe\xf7\xef\x3f\x61\x90\xe5\x0e\x47\x1e\x48\x92\x92\xeb\xd4\x19\x9c\x29\x48\x06\x60\x7f\x32\xd1\xb3\x75\x8f\xce\xcb\xd1\xa0\x0e\x0a\x52\x55\xbf\xe6\x65\x3c\x35\x59\x91\x3a\xba\x5b\x42\xe8\xb8\x0e\xcc\x98\x67\xa5\x3b\xc7\x57\x48\xae\xb4\x9e\x58\xe5\x65\x72\x9b\x64\x24\x7d\xf7\xbd\xd2\x62\x2b\x24\xeb\x3f\x02\x36\x15\x2d\xdb\xa4\x9a\x70\x24\xaa\x93\x07\xea\x81\x8e\x86\xfb\xd6\x0d\x1b\xa5\x23\xd7\x5d\x81\x97\xc9\x95\xb4\x8c\xdb\x49\x26\xeb\xf6\x42\x0a\x63\x35\xb3\x4a\x5f\xf9\x82\xe7\xd6\x64\x0a\xcc\xc8\x77\x53\xc1\xc9\x05\x12\xaf\x92\xec\xfd\xae\xb9\xa6\x9d\xdf\xb7\xa9\xe8\x81\xc2\xbb\x7d\xbb\x7a\x4d\xba\xa4\x29\xa9\x69\x7c\x36\xe4\xc6\xc1\x76\xcc\x51\x3f\x1f\xa5\x9f\xe0\x44\x21\x8d\x49\x31\x33\x68\x8a\x98\xcc\x0c\xfa\x8e\x0d\x6f\x1b\x63\x27\x0e\x7d\x83\x85\xc6\xad\x50\xf2\xb8\x67\x25\xbd\x4d\xf2\xec\xab\x57\x0f\x07\xf0\x67\x9b\xe6\x8e\xd5\xb5\x72\x7f\x8f\x8d\xdc\xc1\x7f\xb9\xcd\x74\xed\x9f\xad\x73\xcf\xa4\x6b\xa2\x06\x94\xc6\x32\xfe\x14\xdc\xd2\xfa\xa8\x87\x96\x65\x5e\x1e\x26\xe7\x29\x6f\xd4\x28\xa7\x43\xf7\x26\xae\x70\xbf\x46\x3d\xcf\x81\xc4\xf1\xb9\xef\x6b\x44\x09\xac\xeb\xf0\x1c\x32\xe7\x8d\x1f\xd4\xc7\x61\xe3\x01\x97\x92\xe6\x88\xbd\x23\x55\xeb\xf3\xdb\x1d\x9f\x07\x9c\x09\xf5\x89\x70\x05\xd1\x85\xf5\x09\x82\x85\x54\x1d\x06\x59\x1e\xd3\x39\xb0\xca\x26\xcb\x92\xec\xb6\xad\x49\x75\xbf\x84\x90\x74\x1d\xb8\x8f\x40\xe9\xe3\x4b\x30\xfd\x7b\x34\x55\x8f\x52\x0a\xb9\xfd\x69\x38\x5c\xc4\x33\x13\x16\x84\x85\x4e\x49\xfc\xd9\xa9\x5e\x33\xfe\x34\x0e\x84\x73\x35\x4a\x1b\x14\xa4\x24\xab\x96\xae\x8a\xfa\x71\x09\x61\x22\xcd\xb8\xd9\x08\x2e\xdc\x63\x32\x30\xcd\xf6\x68\x51\x1b\x97\x0f\x75\x5b\x35\x45\x91\x97\xd3\x1e\x4b\x33\x0e\x83\xd2\x4e\x8f\x7d\x19\x30\x0c\xa2\x3b\x1a\xdd\x9f\x02\xf3\x01\xb5\xd8\x08\xce\xec\x34\xa2\x69\x17\xe6\x08\xbc\x26\xd1\x7d\x53\xb4\x24\x8a\xf2\x26\xfb\x4e\x18\xbe\x22\xfe\xe5\x54\x0c\x16\x6e\xa3\xde\xbc\x57\x5f\xe8\xe6\x50\xdf\x68\xe2\xc7\x7a\x3d\x71\x0c\xbc\xc6\x9b\x24\xa5\x87\x2c\xc8\x9a\x34\x3d\x85\xb1\x1f\x9b\x9d\x45\xb9\x78\x46\x58\xe3\x46\x69\x04\xf3\x2c\x2c\xdf\x09\xb9\x3d\xff\x80\x1d\x64\x87\xf3\x8f\x83\xa4\xf2\x4e\xfa\x78\x98\x7f\x0d\xb8\x2d\x77\x60\x07\xc4\x0e\xc6\x61\xca\x95\x33\x58\x49\xab\x3a\x2f\xe9\x7b\x9c\x46\x63\x95\x16\x72\x3b\x21\xe6\xfb\x28\xd1\xa8\x51\x73\x7c\xef\xe1\x99\xcc\x4f\xc5\x9d\xde\x9a\xcb\x4f\xe1\xe9\x68\xe6\x87\xef\x68\xfd\x1a\x7b\x25\xb7\xc6\x4d\xe8\xec\x4d\x75\x63\x12\x06\xd4\x80\xfa\xb0\x67\xa7\xab\x1c\x50\x6f\x94\xde\xfb\x93\x0a\x82\xff\x03\x00\x00\xff\xff\x2c\x89\x6b\xa5\x86\x09\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 2438, mode: os.FileMode(420), modTime: time.Unix(1597734039, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\x4d\x53\xdb\x56\x14\xdd\xeb\x57\x78\xcc\xb6\xd3\x1f\xc0\xee\x21\x3d\x40\x45\x96\x34\x4f\x52\x5a\xba\xd1\x10\xa3\x69\x69\xc0\x62\x8c\xd9\x74\x55\x43\x00\x43\xac\x40\x13\x93\x42\xf1\x04\x9b\x9a\xe2\x49\x62\x9b\x8f\x14\x1b\x0b\x93\x3f\xa3\xf7\x24\xaf\xf8\x0b\x9d\x27\xd9\x42\xc6\xa5\xf1\x56\x73\xde\xb9\xe7\x9e\x7b\xee\xd5\x58\xd2\x5c\x5a\x32\x53\x8c\x08\x12\x50\x87\x3f\xf0\x8a\xaa\x8c\xc7\xe2\x78\xcf\x72\xcf\xce\x71\xf3\x12\xd7\x0e\x70\xb1\x1a\x67\x98\xb1\xe4\xe2\xea\x4a\xc6\x48\x33\xac\xa0\x29\x2a\x44\x3a\x07\x05\xa8\x42\x7d\x12\xf0\x02\xe4\xc6\x63\x71\xf2\x47\x89\x5c\xed\xe3\x5c\xa9\x7b\x58\xc1\x9d\xb7\x78\xdb\x72\x77\xae\xc9\x6f\x59\xf7\xcf\x97\xdd\xa3\x4d\xf7\xae\xe2\x93\xa4\x8d\x79\x23\x95\x59\x98\x5b\x64\x06\xde\xeb\x08\x2a\x92\x86\x58\x48\x6b\x07\x14\x95\x0b\xef\xf3\xe9\xfd\x6d\xd6\x6b\x9c\xba\x67\x07\xdd\x37\xa7\x4e\xeb\x15\x29\x6e\xe3\x8d\x2b\x2f\x5b\x70\x5a\x36\x29\xb6\xe3\x4f\x90\xe8\x3f\x4a\xe2\xa8\x4c\x78\xb7\xe1\x16\xaa\x38\xef\x93\x4d\x02\x4d\x50\x75\x16\x41\x0e\x8a\x2a\x0f\x04\x9d\x05\xa2\x2e\x4a\x6a\xaf\xd9\xf1\x58\xbc\x6b\x1f\x78\xf5\x0a\xde\xaa\x11\xab\xee\xb4\x2c\x6f\xbd\x13\x14\xb9\xbf\xcd\xd2\xfe\x7e\x36\x57\x32\xcc\xb4\xa4\xa8\x3a\x10\x10\x04\xdc\xec\x83\xa5\x81\xe4\x88\xa5\x3d\xed\x3e\x3a\x74\x71\x58\x72\xf8\xce\xb5\x77\x03\xc9\x7d\x3b\x87\x09\xf4\x89\x59\x5d\x46\xd2\x77\x90\x55\x47\xe5\x2a\xdf\xb8\x47\x75\x5f\xbd\x32\xab\xa8\x30\xa1\xf3\xb2\xdf\xf1\xa4\xa4\x89\x54\x90\xd7\x68\xe2\x8d\x1c\x2e\x7f\xc4\x9b\x87\xa4\xf8\x89\x14\xdb\xbc\xec\xc3\x45\x89\x42\xc1\x33\xc0\x0b\x60\x42\xa0\xde\xf0\x72\xcc\xfb\xe7\x25\x69\xef\x51\x63\xae\xaf\xa8\x1f\xab\x2b\x46\x9a\x91\x81\xa2\x7c\x2f\x21\xce\xe7\x4d\x00\x95\x9d\xa6\xe2\x1a\x9b\x6e\x29\xdb\x2d\x1c\x7a\x8d\x46\x9c\x91\x10\x3f\xc5\x8b\x40\x18\x84\xbc\x3e\x1e\x44\x69\x0a\x44\x3a\xaf\xf8\x20\xc0\xaa\xfc\x33\x5a\xd5\x2d\x54\x49\xae\x49\x8a\x1f\xf0\x1e\x9d\xa4\xdf\x68\xd3\xcb\x16\xdc\x2b\xdb\xad\x97\xdd\xbd\x4d\xfc\xfb\x81\x2f\xd8\x7f\x1d\x6d\x8d\x26\xb6\x56\x09\xde\xfb\x08\xc0\x25\x78\xf1\xa9\x99\xc7\xe6\xe6\x97\x16\x52\xb1\x00\x1e\x8c\xde\x3b\xf9\x18\x99\x7e\x54\x1d\x82\x02\x50\x21\x17\x19\x46\x4f\xe6\x65\x39\x4c\x5e\x60\x7d\x9c\x11\x38\x20\x87\x45\x35\x99\x03\x7e\x51\xfa\x75\xa0\x98\xf3\xa5\x4e\x0a\x37\x41\xce\x98\xb1\xb4\xf1\xd3\x82\x99\xea\x47\x00\xc1\x29\x5e\x12\x47\xda\x25\x9c\x6f\xe3\xe3\xe3\x68\x04\x22\x1b\xc0\x8c\xfd\x6a\xa6\x8c\x3e\x2b\xdd\xa2\xd1\x38\xfb\x0c\x03\xc9\x5a\xaf\xba\x9d\x4b\xaf\x5e\xc6\xb9\x37\x94\xd9\x5c\x36\x52\x2b\x99\xb9\xe4\x0b\x66\x0a\xaa\x7d\xc5\x10\x21\x09\xd1\x51\x6c\xdf\x39\x2d\x0b\xe7\xce\x03\x79\x14\xbf\x9c\x36\x7f\x31\x92\x99\x84\xb1\xf4\xdc\x48\x87\xe6\x02\x8e\x0b\xcd\x0c\xaa\x91\xa6\x8d\x77\x4a\x91\x17\xe1\x1e\xf7\xcc\x7f\x6a\xa0\x81\xff\x43\x4b\xdc\x7f\x35\x0d\x14\xbd\x77\xeb\xe8\x13\x1f\x1c\xdd\xbf\xfb\xdb\xec\x7f\x1c\x80\x94\x39\x6f\x30\xa2\xc4\xc1\xf0\x00\x20\x4d\x14\x79\x71\x4a\x57\x81\x32\x43\xdd\xdb\xb8\x76\xec\x77\xde\xce\x9a\xbb\x76\x43\xf6\xcf\xbb\x5b\xbb\xe4\xad\xe5\x74\x8a\xa4\xf6\x17\x2e\x56\xc9\xf6\x99\x57\xce\x7f\x13\xf3\x1a\x4d\xb7\xb6\x8d\xef\x36\x70\x7d\xdd\xb1\x3f\x05\x9f\x71\x3d\x4f\x1a\xfb\xdf\xd2\x32\xcf\xe7\x92\x2f\x56\x97\x41\x32\x69\xae\xa6\x32\x8c\x0c\x10\x48\xe8\x30\x21\xab\xb3\xb4\xc2\xee\x1a\xd9\x3f\xef\xef\x20\x6d\x5c\xd1\x64\x59\x42\xaa\x7f\x84\x2c\x52\x68\x90\x3c\xbd\xca\xee\x85\x8d\xdf\xbf\x8a\x33\xec\x34\x64\x67\x22\x77\xbc\x54\xee\x7e\xc8\x87\xe3\x0d\xcf\xcc\x04\x60\x67\x34\x59\x07\x2c\x2b\x69\xe2\xa8\x07\x07\x57\xb6\x1c\xbb\xe3\x7d\xfe\x1b\xef\x36\x9f\x38\x3b\xcc\xd8\xf2\xe2\x5c\xea\xd1\x25\xff\x0a\x6d\x34\x5b\xc3\xb4\x91\xbf\xd5\x84\xef\x13\xd3\xd3\x3e\xc9\x0b\x30\xd8\x4f\x51\x13\x84\x87\xe3\xd6\xe3\xa7\x52\xc9\xbb\x2d\xc7\xbe\xc6\x9b\x16\xce\x6d\x11\xeb\x24\xaa\x3f\x1e\xfe\xfa\x78\xa5\xe7\x06\x0d\x86\x1f\x86\x60\x7a\x01\xda\x69\xd5\xfc\xc6\x22\x68\x04\x15\x55\x42\xf0\x11\x9c\x64\x4f\x70\xc5\xea\xc3\xc3\xfc\x22\x63\xc5\x5c\x4d\x27\x8d\x61\x4b\x22\x6d\xfc\x8f\xf8\xe8\xd0\x1e\xfd\x1b\x1e\xf2\x3c\xf0\x27\xb8\x78\xef\xb4\x5f\x3f\x4a\xb5\xf7\xe5\xc8\x2b\xe7\x49\xad\x12\xc4\xb3\x77\x77\x98\x7f\x03\x00\x00\xff\xff\x70\xba\xc2\x20\x2f\x08\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 2095, mode: os.FileMode(420), modTime: time.Unix(1597734020, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
