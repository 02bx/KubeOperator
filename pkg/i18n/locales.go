// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package i18n generated by go-bindata.// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x41\x6e\xdb\x3c\x10\x85\xf7\x3c\xc5\x58\xbe\x45\x76\x82\x45\x3b\x02\x6c\x29\x90\xe4\xff\x07\xba\x11\xc6\xe4\x24\x62\x43\x93\x06\x49\x21\x48\x77\xbd\x57\xef\xd4\x2b\x14\x23\xc9\x6d\x01\xc3\x48\xba\xd2\x86\xf3\xbd\xa7\xf7\xde\x5a\xf9\xf3\xd9\x3b\x21\xd6\x2a\x90\x26\x97\x0c\x5a\x51\xc8\xbd\xec\x64\xbf\xcd\xcb\xbd\x2c\xfa\x46\xb6\xf5\xb1\xd9\xc8\x07\xc8\xb6\x68\x2c\x69\x48\x1e\x34\x59\x4a\xb4\x82\x6e\xa0\x40\x60\x22\xa0\x03\x8c\xd1\x2b\x83\x89\x34\x0c\x3e\x26\x18\x9d\xa6\x00\x69\x30\x11\x5e\xe9\x3d\xbb\x83\xed\xbf\xd4\xd5\x3f\xb1\xbf\x79\x47\x37\x6c\xb1\x66\xc9\xab\xc4\x63\xdd\x76\x8b\xce\x3d\xf2\x6c\x91\xe1\x36\x10\xea\xf7\xbf\x15\xde\x4c\x1a\x20\x0d\x04\xca\x8e\x31\x51\x60\xfc\x18\x29\x88\xa7\xbc\x6d\xff\xaf\x9b\xa2\xaf\xea\xae\x3f\xe4\xdd\xe6\xf1\x01\x32\x86\x5d\x30\xc6\x37\x1f\x34\x03\x8d\x53\x3e\x04\x52\x29\x13\x75\x53\xee\xca\x2a\xdf\xdf\xbc\xf7\xc1\xbc\x18\x87\xf6\xde\xe1\xb1\x95\x4d\x5f\xb6\xd3\x5d\xbe\xe9\xca\xff\xe4\x72\xc8\x36\xf8\xad\xf3\x09\xc8\xe1\xc9\x92\x5e\xc1\x93\x25\x8c\x04\xca\xbb\x84\x2a\x4d\xce\x51\x9f\x8d\x33\x31\x05\x4c\x3e\xac\x16\x20\xd3\xb6\xf5\xb1\xe2\x50\x2a\x0f\x71\x54\xc3\x04\xfc\xf9\xe3\x7b\x26\xf2\xe2\x50\x56\xfd\x26\xaf\xa6\x67\x73\x90\x8b\xa8\xa6\x67\x1c\x6d\x9a\xa1\xb3\x05\x85\x8e\x2d\x9c\x68\xc9\x54\xaf\xb8\xdf\x6d\x7e\xdc\x77\xb7\x8c\x62\xb9\xff\x33\xb1\x78\x0b\xc8\x84\x10\x62\x1d\xe8\xc5\x78\x77\xed\xb1\x91\xbb\xb2\xae\x3e\x3b\x44\x98\x8f\x3f\x2a\x95\xf7\xc3\x8d\xf2\xf7\x2a\xc4\x1b\xfc\xb4\xcc\x34\xc0\x0f\x44\x2e\x16\x1d\x8b\xf8\x0b\xb9\x98\x50\xbd\x8a\x9d\xec\xae\xff\x23\x9b\xa6\x6e\xe6\x0e\x16\xcb\xcf\x7e\x74\x9c\xc0\xfa\x12\xfc\x57\x52\xe9\x40\xe7\x13\x85\xdf\x33\xc8\x0b\xae\xec\xc8\xc1\x0f\x18\xe1\x44\xe4\x00\xb5\x26\x9d\xfd\x0a\x00\x00\xff\xff\x05\xdd\x12\xbc\xc0\x03\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 960, mode: os.FileMode(420), modTime: time.Unix(1595904302, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xd1\x6b\xd3\x40\x1c\xc7\xdf\xef\xaf\x28\xe9\x7f\xb1\xb7\xd0\x5c\xbb\x40\x9b\x93\x4b\xaa\xe0\x4b\xa8\xdd\xa1\x55\x9b\x8c\xb4\xbe\xf8\x16\x86\xb5\xd3\xd5\xcd\x11\xb0\xc3\x42\x3b\x49\xb1\x28\x6b\x74\x13\x5a\x96\x6d\x7f\x4d\x2f\x77\x79\xda\xbf\x20\x97\x33\x63\x05\x07\x7d\xff\xfe\x3e\xf7\xf9\x7d\x7f\x57\x6c\xba\xed\xb6\xeb\x00\x50\x6c\x7a\x64\x87\x38\xdd\x56\xe3\x35\xd0\x60\x15\x5a\xd0\x2e\xab\x7a\x15\x6a\x36\x86\x26\xaa\xe3\x12\xdc\x2a\x28\xb4\x3f\x49\x4f\x42\x1a\xfe\xe6\x7f\xa6\xb7\x57\x3e\x8f\xa6\xec\xfb\x30\x3d\x9e\xae\x96\x1f\x93\xd1\x3e\x7d\x77\xc1\xfd\x60\xb5\x8c\x93\xd1\xa5\xf2\x00\xc4\x7e\x8a\x8c\x4d\x49\xf4\x30\x62\xc1\x8c\x1e\x64\xb0\xb2\x5a\xaf\x5a\x76\x49\x35\x6c\x03\x59\xb6\x84\x6f\x15\x94\x34\x1e\xf2\x79\x48\xdf\x9f\x25\x83\xf9\x6a\x39\xe0\x7b\xd7\x92\x7c\x7b\xe5\x2b\x00\x14\x5f\xb8\x9d\x6e\x6e\xb2\x8d\x4c\xeb\x9f\xce\x7f\x05\xa4\x38\x5d\x9c\xb3\xf8\x50\x0a\xa4\x5f\x7b\xec\x26\x14\x9c\x37\x1d\xe2\x81\x47\xaa\x69\x3e\x41\x58\xcb\x0c\x6a\xaa\x55\xda\x16\x9c\xa8\xc7\x26\x7e\x1a\x9c\xf0\x28\x52\x00\xc2\x7a\x45\x37\xd4\xea\x7a\xe4\xd3\x78\x3d\x55\x37\x21\xb6\x75\x33\x0b\xa9\x25\x4b\x7f\x2c\x36\x61\xc1\x2c\xe9\x2f\x92\xd1\x0f\x7a\x24\xd6\xce\x9c\x16\xdc\x0f\xd8\x45\xcc\xe6\xa7\xec\xa8\x47\x3f\x0f\xb3\xad\xb2\x69\x31\x5a\x46\x75\x43\xac\x92\x7c\x99\x24\x67\xa1\x9c\xcf\x12\xaa\x56\xd3\x8d\x87\xba\x2a\x34\x76\xda\x2d\xa7\x20\xe3\xb2\x32\xfe\xed\xe7\x5a\x6b\x1e\x79\xde\x72\x9d\xbc\x37\x0c\x2b\x3a\x32\x36\xfa\x0d\xf4\xe0\x92\x8e\xc7\xf7\x2b\xbc\x77\x43\x50\x7c\xeb\x3a\x24\xa7\x8a\x7f\xb0\x19\x33\x27\xac\x5d\x66\x6f\xc6\xae\xcf\xf9\xfc\x94\xf6\x8f\x05\xd9\xdd\x25\x4e\xa7\xdb\x68\xbe\x02\x15\x68\xe5\xc6\x10\x63\x84\x45\x3f\xfb\x37\xab\xe5\x80\xf6\x7f\x49\x3d\x91\xdf\xf5\xdc\x97\xa4\xd9\xad\x91\xf6\x33\xe2\xdd\xdd\x43\xd5\xb4\xbb\x43\xc8\xd7\x92\x45\x4c\x3f\x4c\x14\xf0\x37\x00\x00\xff\xff\x7c\x48\x0e\x80\x27\x03\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 807, mode: os.FileMode(420), modTime: time.Unix(1595904287, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
