// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package i18n generated by go-bindata.// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x4d\x6e\xdb\x30\x10\x85\xf7\x3c\xc5\x58\xbe\x85\x77\x82\x4d\xdb\x02\x1c\x29\xa0\xe4\xfe\x6d\x04\x9a\x9c\x46\x6c\x68\xd2\x20\x47\x48\xd3\x5d\xef\xd5\x3b\xf5\x0a\xc5\xc8\x76\x50\x20\x30\x92\xac\xb8\x99\xf7\xde\xc7\x37\x33\x37\xf1\x78\x8c\x41\x88\xb9\x49\x68\x31\x90\xd3\x5e\xac\xe4\x4e\x76\xb2\x5f\x97\xd5\x4e\xae\x7a\x25\xdb\x66\xaf\x96\x72\x01\xc5\x5a\x3b\x8f\x16\x28\x82\x45\x8f\x84\x33\xe8\x06\x4c\x08\x2e\x83\x0e\xa0\x73\x8e\xc6\x69\x42\x0b\x43\xcc\x04\x63\xb0\x98\x80\x06\x97\xe1\x11\x9f\x8b\x1b\xb6\xfd\xb7\xa6\xfe\x90\xf7\xaf\x18\xf0\x95\xb7\x98\x73\xa4\xd8\x36\x6d\xd7\x97\x3b\x25\xcb\xd5\xd7\x5e\x7e\xa9\xda\xae\x5d\x40\xb1\x65\x1a\xed\x13\x6a\xfb\x0c\xf8\xd3\x65\xca\x2f\x34\x93\xe2\x8c\x74\x0b\xe2\xfc\x1b\xe6\xb8\x58\xfc\x07\xf3\xe4\x68\x00\x1a\x10\x8c\x1f\x33\x61\x62\x92\x31\x63\x12\xf7\x65\xdb\x7e\x6e\xd4\xaa\xaf\x9b\xae\xbf\x2b\xbb\xe5\x76\x01\x05\x9b\x9d\x74\xce\x4f\x31\x59\x36\x74\xc1\xc4\x94\xd0\x50\x21\x1a\x55\x6d\xaa\xba\xdc\xbd\x9a\x8f\xc9\x3d\xb8\xa0\xfd\x2d\xe1\xbe\x95\xaa\xaf\xda\x49\x57\x2e\xbb\xea\x93\xbc\x08\x19\x83\x67\x43\x24\xc0\xa0\x0f\x1e\xed\x0c\xee\x3d\xea\x8c\x60\x62\x20\x6d\x68\x22\xd7\xf6\xe8\x82\xcb\x94\x34\xc5\x34\xbb\x18\xb2\xdb\xba\xd9\xd7\x5c\x4a\x1d\x21\x8f\x66\x98\x0c\xff\xfe\xf9\x5d\x08\x21\xe6\x09\x1f\x5c\x0c\xd7\x12\x95\xdc\x54\x4d\xfd\xde\x83\x81\xb3\xf8\xad\x46\x79\xcf\x5c\x27\xbf\xd7\x20\xbe\x95\x77\xc7\x4c\x87\xf2\x46\xc8\xc9\xeb\xc0\x21\xf1\x84\x21\x93\x36\x8f\x62\x23\xbb\xeb\x7f\xa4\x52\x8d\x3a\x17\x70\x41\xfe\x1e\xc7\x60\x79\xfe\x94\xe2\x0f\x34\x74\x87\xc7\x03\xa6\x97\x1d\x94\x2b\xee\x6b\xcf\xc5\x0f\x3a\xc3\x01\x31\x80\xb6\x16\x6d\xf1\x2f\x00\x00\xff\xff\x14\xe4\x3c\x3e\x68\x03\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 872, mode: os.FileMode(420), modTime: time.Unix(1595921077, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xcf\x6a\xdb\x40\x18\xc4\xef\xfb\x14\x41\x7e\x8b\xdc\x16\x6b\xe3\x08\x1c\x6d\xd9\x95\xfb\xef\xb2\xa4\xee\xd2\xa6\xad\xa5\x20\xbb\x97\xde\x44\xa9\x71\xda\xb4\x49\x83\xa0\x0e\x35\xd8\x01\x9b\x9a\x42\xa2\x36\x29\xc8\x58\x69\x9e\xc6\xab\x95\x4e\x79\x85\xb2\x52\x25\x2a\x68\xc0\xf7\x99\xf9\x7d\x33\x5f\xad\xed\x74\x3a\x8e\x0d\x40\xad\xed\xf2\xa7\xdc\xee\xed\xed\xbe\x02\x3a\x6a\x22\x0b\xb1\x2d\x68\x34\x91\xce\x08\xa2\xb8\x45\xea\x68\x73\x43\x13\x83\x49\x7a\x3a\x15\xd3\x9f\xc9\xaf\xd9\xed\xb5\x97\x04\x33\xf9\x6d\x98\x9e\xcc\x56\x8b\x0f\xf1\xe8\x40\xbc\xbb\x4a\x3c\x7f\xb5\x88\xe2\xd1\x52\xbb\x23\x84\x3d\xc6\xe6\xba\x49\xe2\x28\x90\xfe\x5c\x1c\x2e\x35\x00\x6a\xcf\x9d\x6e\x0f\x6c\x63\x6a\x31\xd8\x24\x08\xea\x8f\x18\x7a\x68\x50\x8b\x6e\x6e\x68\x39\x51\x84\x97\xe2\x7c\x28\x46\xf3\x12\x9d\xa9\x73\xfe\x7f\x89\xa5\x4f\x46\x47\x39\x31\xfd\xda\x97\x37\x53\x85\x7b\xdd\xe5\x2e\xb8\x07\x29\x7d\x80\x89\xce\x4c\x6c\xb1\x1d\x68\xd5\xb7\x55\x4e\xd0\x97\x13\x2f\xf5\x4f\x93\x20\xd0\x00\x26\x46\xc3\x30\x61\xb3\x2a\xf9\x34\xae\xaa\x5a\x14\x11\x66\xd0\x4c\x04\xeb\x96\x71\x5f\x4d\x20\xfd\x79\x3c\x08\xe3\xd1\x77\x71\xac\x7a\x66\x37\x85\x89\xe7\xcb\xab\x48\x5e\x9c\xc9\xe3\xbe\xf8\x3c\xbc\xbd\xf6\xfe\xba\x95\x75\x0b\xb7\x4c\x55\x25\xfe\x32\x89\xcf\xa7\xb9\x3f\x53\x80\x9a\xcb\x9f\xed\x39\x76\xd1\x9c\xa0\x86\x81\xcd\xb5\x1e\x28\x0e\x97\x62\x3c\xfe\x77\x84\xca\xec\x6f\x1c\x9b\x17\xa9\xea\x75\xeb\x65\x16\x09\x95\x6d\xdf\xce\xe5\xef\xcb\xe4\xe2\x4c\x0c\x4e\x54\xb2\xb3\xcf\xed\x6e\x6f\xb7\xfd\x12\x34\x90\x55\x5c\x8c\x08\xc1\x44\x35\x3c\xb8\x59\x2d\x3e\x8a\xc1\x8f\xfc\x3c\xa5\xdf\x77\x9d\x17\xbc\xdd\xdb\xe1\x9d\x27\xdc\x2d\x17\x85\xba\x5e\x4e\x99\xd3\xe2\x30\x12\xef\x27\x1a\xf8\x13\x00\x00\xff\xff\x27\x33\x9e\x2a\xda\x02\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 730, mode: os.FileMode(420), modTime: time.Unix(1595921077, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
