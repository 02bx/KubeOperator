// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package i18n generated by go-bindata.// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x41\x6e\xdb\x3a\x10\x86\xf7\x3c\xc5\x58\xbe\x85\x77\x84\x45\xdb\x02\x6c\x29\x90\xe4\xf7\xda\x6e\x04\x9a\x9c\x44\x6c\x68\xd2\x20\x29\xa4\xe9\xae\xf7\xea\x9d\x7a\x85\x62\x24\x39\x2d\x60\x18\x49\x57\xda\x70\xbe\xf9\xf4\xcf\xbf\x54\xfe\x7c\xf6\x8e\xb1\xa5\x0a\xa8\xd1\x25\x23\x2d\xcb\xc5\x5e\xb4\xa2\xdb\xf0\x62\x2f\xf2\xae\x16\x4d\x75\xac\xd7\x62\x05\xd9\x46\x1a\x8b\x1a\x92\x07\x8d\x16\x13\x2e\xa0\xed\x31\x20\x98\x08\xd2\x81\x8c\xd1\x2b\x23\x13\x6a\xe8\x7d\x4c\x30\x38\x8d\x01\x52\x6f\x22\x3c\xe3\x6b\x76\x07\xdb\x7d\xa9\xca\x7f\x62\x7f\xf7\x0e\x6f\xd8\x6c\x49\x2b\xd9\xae\x6a\xda\x8e\xef\x6b\xc1\xf3\xcf\x9d\xf8\x54\x34\x6d\xb3\x82\x6c\x47\x36\xd2\x06\x94\xfa\x15\xf0\x9b\x89\x29\xbe\xd9\x8c\x13\x93\xd2\x3d\x89\xe9\x6f\xc8\x63\x46\xfc\x25\xf3\x62\x52\x0f\xa9\x47\x50\x76\x88\x09\x03\x99\x0c\x11\x03\x7b\xe0\x4d\xf3\x7f\x55\xe7\x5d\x59\xb5\xdd\x81\xb7\xeb\xdd\x0a\x32\x82\x5d\x64\x8c\x2f\x3e\x68\x02\x1a\xa7\x7c\x08\xa8\x52\xc6\xaa\xba\xd8\x16\x25\xdf\xdf\xbc\xf7\xc1\x3c\x19\x27\xed\xbd\xc1\x63\x23\xea\xae\x68\xc6\x39\xbe\x6e\x8b\xff\xc4\x3c\x48\x1a\xf4\xd6\xf9\x04\xe8\xe4\xc9\xa2\x5e\xc0\x83\x45\x19\x11\x94\x77\x49\xaa\x34\x9a\x4b\x7d\x36\xce\xc4\x14\x64\xf2\x61\x31\x03\x89\xb6\xa9\x8e\x25\x85\x52\x7a\x88\x83\xea\x47\xe0\xaf\x9f\x3f\x32\xc6\xf3\x43\x51\x76\x6b\x5e\x8e\xcf\xa6\x20\xe7\xa5\x1a\x1f\xe5\x60\xd3\x04\x9d\x14\x94\x74\xa4\x70\xc2\x39\x53\xbd\xa0\xf0\x37\xfc\xb8\x6f\x6f\x19\xf9\x3c\xff\xa7\x8d\xf1\x16\x90\x31\xc6\xd8\x32\xe0\x93\xf1\xee\x7a\xc7\x5a\x6c\x8b\xaa\xfc\x68\x67\x61\x1a\x7e\xef\xa8\x54\x35\xba\x28\x7d\xaf\x8b\xa8\xae\x1f\x5e\x33\x76\xf5\x9d\x25\x17\x2b\x1d\x2d\xf1\x17\x74\x31\x49\xf5\xcc\xb6\xa2\xbd\xfe\x8f\xa8\xeb\xaa\x9e\x6e\x30\x2b\x3f\xfa\xc1\x51\x02\xcb\x4b\xf0\x5f\x51\xa5\x03\x9e\x4f\x18\xde\x6a\xc0\x73\x3a\xd9\x91\x82\xef\x65\x84\x13\xa2\x03\xa9\x35\xea\xec\x77\x00\x00\x00\xff\xff\x36\xd3\x6d\x24\xeb\x03\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 1003, mode: os.FileMode(420), modTime: time.Unix(1595933644, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x5f\x6b\xda\x50\x18\xc6\xef\xcf\xa7\x90\xf8\x2d\xbc\x3b\x98\xa3\x0d\xc4\x64\x9c\xc4\xfd\xbb\x09\xce\x86\xcd\x6d\x26\x25\xba\x9b\xdd\x85\x32\x67\xb7\xba\x76\x25\x30\xcb\x04\xed\x88\x4c\x36\x34\x5b\x3b\x50\x9a\xb6\x9f\xc6\x93\x73\x72\xd5\xaf\x30\x4e\x0e\x4a\x85\x16\xbc\x7f\xde\xdf\xf9\xbd\xcf\x7b\xf2\x75\xb7\xd9\x74\x1d\x00\xf2\x75\xcf\xde\xb5\x9d\x76\xa3\xf6\x16\xc8\x48\x45\x26\xb2\x4a\x50\x51\x91\x6c\x61\x64\xe8\x55\x5c\x44\x85\x9c\x44\xba\xa3\xf4\x34\x24\xe1\x5f\xf6\x6f\x7c\x7b\xe5\xb3\x68\x4c\x7f\xf6\xd3\x93\xf1\x72\xf1\x39\x19\x1c\x90\x0f\x17\xcc\x0f\x96\x8b\x38\x19\x5c\x4a\x0f\x40\xac\xe7\xba\xb6\x2d\x89\x1c\x45\x34\x98\x90\xc3\x0c\x56\x82\x55\xd5\xb4\x8a\x50\xb3\x34\xdd\xb4\x04\xbc\x90\x93\xd2\xb8\xcf\x66\x21\xf9\x38\x4d\x7a\xb3\xe5\xa2\xc7\xf6\xaf\x05\xf9\xf6\xca\x97\x00\xc8\xbf\x72\x5b\x6d\xb0\xa3\x1b\xa6\x05\x55\x8c\xa0\xfc\xcc\x42\x4f\x15\xc3\x34\x0a\x39\x49\x78\x92\xf9\x39\x99\xf6\xc9\x60\xb2\x16\xce\xd2\xc2\xfa\x5e\xcf\xf5\x1c\x8d\x8f\x84\x67\xfa\xbd\x43\x6f\x42\xfe\xdc\xbb\x96\xed\x81\x47\xd0\x30\x9e\xe8\x58\xce\x44\x2b\xd0\x2c\xee\x70\x4e\xd4\xa1\x23\x3f\x0d\x4e\x59\x14\x49\x40\xc7\x4a\x59\xd1\xa0\xba\x19\xf9\x32\xdc\x4c\x55\x0d\x84\x2d\xc5\xc8\x42\xb0\x68\x2a\x8f\xf9\xc2\x34\x98\x24\xdd\x79\x32\xf8\x45\x8e\x79\x3b\x99\xd3\x9c\xf9\x01\xbd\x88\xe9\xec\x8c\x1e\x77\xc8\xd7\x7e\xb6\x7c\x36\xcd\x47\x4b\x7a\x55\xe3\xab\x24\xdf\x46\xc9\x34\x14\xf3\x59\x02\xca\x15\x45\x7b\xa8\xd2\x5c\x6d\xb7\xd9\x70\x72\x22\x2e\x9a\x65\x3f\x7e\x6f\x94\xeb\xd9\x2f\x1b\xae\xb3\xea\x0d\xa3\xb2\xa2\x6b\x5b\x7d\x1a\x72\x78\x49\x86\xc3\xbb\x15\xde\x39\x35\xc8\xbf\x77\x1d\x7b\x45\xe5\xdf\x65\x3b\xe6\x8a\xb0\x71\x99\xfd\x09\xbd\x3e\x67\xb3\x33\xd2\x3d\xe1\x64\x77\xcf\x76\x5a\xed\x5a\xfd\x0d\x28\x23\x73\x65\x8c\x30\xd6\x31\xef\xe7\xe0\x66\xb9\xe8\x91\xee\x1f\xa1\xc7\xf3\x7b\x9e\xfb\xda\xae\xb7\x2b\x76\xf3\x85\xed\xad\xef\x01\x65\x79\x7d\x08\xf1\x5a\x32\x8f\xc9\xa7\x91\x04\xfe\x07\x00\x00\xff\xff\x0f\x46\xe7\x18\x4e\x03\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 846, mode: os.FileMode(420), modTime: time.Unix(1595933644, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
