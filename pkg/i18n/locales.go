// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package i18n generated by go-bindata.// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x41\x6e\xdb\x30\x10\x45\xf7\x3c\xc5\x58\xbe\x45\x76\x82\x4d\x3b\x02\x1c\x31\xa0\xe4\x16\xe8\x46\xa0\xc9\x69\xc4\x86\x26\x0d\x72\x84\x20\xdd\xf5\x5e\xbd\x53\xaf\x50\x8c\x6d\x15\x05\x02\x23\xc9\x4a\x9b\x99\xf7\xbe\xfe\x70\x69\xd3\xf1\x98\xa2\x10\x4b\x9b\xd1\x61\x24\x6f\x82\x58\xcb\x9d\xec\xe5\xb0\xa9\x9b\x9d\x5c\x0f\x5a\x76\x6a\xaf\x57\xf2\x0e\xaa\x8d\xf1\x01\x1d\x50\x02\x87\x01\x09\x17\xd0\x8f\x98\x11\x7c\x01\x13\xc1\x94\x92\xac\x37\x84\x0e\xc6\x54\x08\xa6\xe8\x30\x03\x8d\xbe\xc0\x33\xbe\x56\x37\xb0\xc3\x37\xd5\x7e\x8a\xfd\x33\x45\x7c\xc3\x16\x4b\x56\xce\x8a\x7b\xd5\xf5\x57\xcf\x2d\xf2\x25\x22\xc3\x43\x46\xe3\x5e\xff\x37\xbc\x78\x1a\x81\x46\x04\x1b\xa6\x42\x98\x19\x3f\x15\xcc\xe2\xb1\xee\xba\xaf\x4a\xaf\x87\x56\xf5\xc3\x43\xdd\xaf\xee\xef\xa0\x62\xd8\xc9\x94\xf2\x92\xb2\x63\xa0\x8f\x36\xe5\x8c\x96\x2a\xa1\x74\xb3\x6d\xda\x7a\xf7\x66\x3e\x65\xff\xe4\xa3\x09\xb7\x16\xf7\x9d\xd4\x43\xd3\x9d\xf7\xea\x55\xdf\x7c\x91\xd7\x45\x8e\xc1\xb3\x31\x11\x60\x34\x87\x80\x6e\x01\x8f\x01\x4d\x41\xb0\x29\x92\xb1\x74\x4e\x6e\xdc\xd1\x47\x5f\x28\x1b\x4a\x79\x71\x05\x32\x6d\xa3\xf6\x2d\x97\xd2\x26\x28\x93\x1d\xcf\xc0\x3f\xbf\x7f\x55\x42\x88\x65\xc6\x27\x9f\xe2\x5c\xa2\x96\xdb\x46\xb5\x1f\x7d\x05\x70\x59\x7e\xaf\x51\x3e\x1e\xd7\xc9\xdf\x59\xc4\x0f\xe0\xc3\x9a\xf3\xf5\xdf\x91\x9c\x82\x89\x2c\x49\x27\x8c\x85\x8c\x7d\x16\x5b\xd9\xcf\xff\x23\xb5\x56\xfa\x52\xc0\x35\xf2\xf7\x34\x45\xc7\xf3\xa7\x9c\x7e\xa0\xa5\x07\x3c\x1e\x30\xff\xbb\x41\xbd\xe6\xbe\xf6\x5c\xfc\x68\x0a\x1c\x10\x23\x18\xe7\xd0\x55\x7f\x03\x00\x00\xff\xff\xcf\x43\x56\xb6\x3d\x03\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 829, mode: os.FileMode(420), modTime: time.Unix(1595841139, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x51\x6b\xd3\x50\x1c\xc5\xdf\xef\xa7\x90\xe4\x5b\xf8\x16\x9a\xbb\x2e\xd0\xe5\xca\x4d\xaa\xe0\x4b\x98\xf1\xa2\x53\x9b\x8c\x34\xbe\xf8\x16\xc4\x92\xe9\x74\x73\x04\xdc\xb0\xd0\x0c\x52\x2c\x82\x8d\xb6\x42\x4a\x53\xfb\x69\x7a\x73\x93\xa7\x7e\x05\xb9\x4d\x53\x0c\x38\xe8\xfb\x39\xbf\xff\x39\xe7\x2f\x9a\x76\xa7\x63\x5b\x00\x88\xa6\x43\x9e\x12\xcb\x3d\x39\x7e\x05\x64\xd8\x82\x3a\x34\x0e\x24\xa5\x05\x65\x03\x43\x0d\xb5\x71\x03\xde\xbf\x27\x50\x3f\x2c\x6e\x22\x1a\xfd\xca\x7f\x0f\xd7\x0b\x2f\x8f\x87\xec\xdb\x75\x71\x35\x5c\xcd\x3e\x64\xfd\x33\xfa\x6e\x9a\x7b\xc1\x6a\x96\x66\xfd\xb9\x70\x07\xc4\x78\x8c\xd4\x7d\x49\xf4\x22\x66\xc1\x88\x9e\xcf\x05\x00\xc4\xe7\x76\xd7\xad\x98\x87\x48\xd3\xb7\xe0\xff\xa2\xca\x08\x34\x99\xb0\xf4\xa2\x44\x15\x5f\x7b\x6c\x19\x71\xce\xeb\x2e\x71\xc0\x03\x49\xd3\x1e\x21\x2c\x1b\x2a\xd2\x8d\x23\x49\x6f\x1c\x72\x4e\xdc\x63\xa1\x57\x04\x37\x79\x1c\x0b\x00\x61\xa5\xa9\xa8\x52\xab\x2e\xf9\x34\xa8\xab\xda\x1a\xc4\x86\xa2\x6d\x44\x52\x43\x57\x1e\xf2\x6e\x2c\x18\x65\x7e\x92\xf5\xbf\xd3\x4b\x5e\x60\x93\x29\xc9\xbd\x80\x4d\x53\x36\xbe\x65\x97\x3d\xfa\xf9\x7a\xbd\xf0\xb6\x6e\x6e\x3d\x40\x6d\x95\x57\xc9\xbe\x84\xd9\x8f\xa8\xf4\x6f\x14\x40\x74\xc8\xb3\x13\xdb\xaa\x9a\x63\xd8\x54\x90\xba\xd7\x67\xe8\xf9\x9c\x0e\x06\xff\x8e\x50\xdb\xf3\x8d\x6d\x91\x8a\xca\x7f\xb2\x1f\xb3\x22\xd4\xb6\x7d\x3b\x62\x7f\x26\xf9\xf8\x96\xfa\x57\x9c\x6c\x9f\x12\xab\xeb\x1e\x9b\x2f\x41\x13\xea\x55\x62\x88\x31\xc2\xbc\xe1\xd9\x72\x35\xfb\x48\xfd\x9f\x65\x3c\xae\x3f\x75\xec\x17\xc4\x74\x8f\x48\xe7\x09\x71\x76\x8b\x4a\xb2\xbc\x9b\xb2\xbc\x96\x25\x29\x7d\x1f\x0a\xe0\x6f\x00\x00\x00\xff\xff\xd2\x2b\x5b\x26\xb3\x02\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 691, mode: os.FileMode(420), modTime: time.Unix(1595841094, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
