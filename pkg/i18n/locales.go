// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package i18n generated by go-bindata.// sources:
// locales/en-US/home.yml
// locales/zh-CN/home.yml
package i18n

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xcb\x72\xac\x36\x10\xdd\xf3\x15\x6d\x66\x9b\xba\x95\xf5\xec\x64\x90\x6d\x72\x19\xa0\x78\xdc\xc4\xd9\x50\x1a\x68\x66\x14\x33\x12\x25\x89\x38\xbe\xbb\xfc\x57\xfe\x29\xbf\x90\x12\x68\x30\x7e\xd5\x1d\x57\xbc\x71\xb9\xac\xd3\x8f\xd3\xa7\x4f\xb3\x69\xe4\xe9\x24\x85\x97\x90\x1d\xad\xe9\x6f\x51\x51\x16\x5b\xf0\x13\x76\x42\x60\xbd\x42\xd6\x3e\x01\xfe\xc5\xb5\xd1\xbe\xe7\x6d\x9a\x7e\xd4\x06\x95\x17\xc4\x55\x51\xd2\xbc\x0e\x69\x4c\x4b\x5a\xdf\x90\x28\xa6\xe1\x16\xfc\x86\x09\x10\xd2\x40\x8b\x3d\x1a\x04\xf7\x1c\xb8\x80\x66\x54\x0a\x85\x01\x6d\x98\x41\xdf\xdb\x34\x0a\x5b\x14\x86\xb3\xde\x7b\x11\xa4\xce\x69\x91\x56\x79\x40\xb7\xe0\xdf\x30\xde\x63\x0b\x46\xba\x78\x57\x50\x1e\x51\x21\x70\x0d\x4c\x00\xd3\x5a\x36\x9c\x19\x6c\xe1\x28\xb5\x81\x51\xb4\xa8\xc0\x1c\xb9\x86\x07\x7c\xf2\x3f\x08\x5b\xff\x9e\x26\x9f\x8a\xfd\x5d\x0a\x7c\x27\xf6\x0d\xa9\xe2\xb2\x0e\x72\x1a\xd2\xa4\x8c\x48\x5c\x07\x24\xa9\x93\xb4\x74\x94\x6c\xc1\x0f\xb1\x63\x63\x6f\xe0\xb9\x53\x68\x98\xb0\xec\xec\xd1\x25\x6d\x2d\xa7\xb6\x78\xef\x2e\x2d\xca\x9a\xc4\x39\x25\xe1\xfd\xf3\x14\xee\x6c\x5f\xaf\xa7\xe0\xfa\x9a\x10\x0b\xf1\xef\xb6\x33\xf3\x62\x3b\x72\x21\x56\x6d\x3d\x72\x73\x04\x73\x5c\x66\xf4\x5e\xdc\xfa\xfa\xbe\xce\xf2\xf4\x17\x1a\x94\xff\x2b\xc5\xa0\xe4\x1f\xd8\x18\xdf\x2b\xee\x8b\x92\xee\xea\x28\x9b\x98\xba\x49\xab\xc4\xd6\x9e\xf5\xc8\x34\x42\xc7\xfb\xde\x2a\xc5\x22\x7a\xd9\xb0\x1e\xa2\x0c\x3a\xae\xb4\xf9\xf7\x9f\xbf\x7d\x2f\x49\x2d\x8e\x7c\x23\x51\x4c\xae\x63\x4b\x70\x22\x21\x1a\x80\xfd\xc9\x78\xcf\xf6\x3d\x5a\x2e\x47\x8d\xca\xcb\x48\x51\xfc\x9a\xe6\xe1\x94\x64\x47\xca\xe0\x6e\x0b\xbe\xad\x75\x60\x5a\x3f\x4a\xd5\xda\x7a\xb9\x68\xa4\x52\x53\x55\x69\x1e\xdd\x46\x09\x89\xdf\xbc\x97\x8a\x1f\xb8\x60\xfd\x47\xc0\xaa\xa0\x79\x1d\x15\x13\x8e\x04\x65\xf4\x8d\x3a\xa0\x2d\xc3\xbe\xb5\xc3\x46\x61\x8b\x6b\xaf\xc0\xb5\xd9\x48\x61\x58\x63\xa6\x36\x59\x7b\xe2\x82\x6b\xa3\x98\x91\xea\xca\x05\x5c\x53\x93\x48\xd0\x63\x73\x9c\x02\x4e\x2c\x90\x70\x17\x25\x6f\xb5\x66\x93\xb6\x4e\x6f\x53\xd0\xb9\x84\x37\x7a\xbb\x7a\x59\x74\x4e\x63\x52\xd2\x70\x35\xe4\xca\xc2\x8e\xcc\x96\xbe\x1e\xa5\x9b\xe0\x54\x42\x1c\x92\x6c\xa9\xa0\xca\x42\xb2\x54\xd0\xb7\x6c\x78\x9d\x18\x5b\x3e\xe7\xf5\x36\x0a\x0f\x5c\x8a\xb3\xce\x72\x7a\x1b\xa5\xc9\xa5\x5b\x0f\x33\xf8\x47\x4a\xb3\xcb\x6a\x53\xd9\xdf\xe7\x44\x76\xe1\x2f\x4e\x33\x6d\xfb\x8f\xe4\xdc\x33\xe1\x2f\x16\x68\xa9\xac\xe2\x78\x0b\x7e\x30\x37\x7d\x40\xb3\x5e\xac\xe7\xc1\x1f\xb1\x79\x98\xff\x23\x45\xc7\x0f\xa3\x62\x86\x4b\x31\x71\x1a\xed\xc8\x2d\xfd\x38\x14\x3f\xb1\x03\x5e\x14\xc8\xf3\x36\x72\x40\xa1\x0d\x6b\x1e\xbc\x5b\x5a\x9e\x69\xa6\x79\x9e\xe6\xb3\xa0\x1c\x93\x9d\x1c\xc5\xe4\x3f\x6e\xb6\x3b\x3c\xed\x51\x2d\xf2\x20\x61\xb8\x96\xc3\x1e\x51\x00\x6b\x5b\x5c\x43\x16\x1b\x74\xfa\xf9\xd8\x03\x1d\xe0\x3d\x03\x3c\x63\xef\x48\x51\x3b\x4e\xad\x27\x38\xc0\x8a\xff\x85\xcf\xe0\x1d\x55\x7b\x1b\x21\x5b\xf4\x92\x34\xa4\x8b\x8d\xe6\x55\x92\x44\xc9\x6d\x5d\x92\xe2\xeb\x16\x7c\xd2\xb6\x60\x1f\x81\x54\xe7\xfb\x34\xfd\x79\x1e\xb5\x1a\x85\xe0\xe2\xf0\xd3\x30\xb3\xfc\xc8\xb8\x01\x6e\xa0\x95\x02\xbf\xd8\x04\x7b\xd6\x3c\x8c\x03\x69\x1a\x39\x0a\xe3\x65\x24\x27\xbb\x9a\xee\xb2\xf2\x7e\x0b\x7e\x24\xf4\xd8\x75\xbc\xe1\xf6\xc4\x0d\x4c\xb1\x13\x1a\x54\xda\xba\x56\x59\x17\x55\x96\xa5\xf9\xb4\x5d\x42\x8f\xc3\x20\x95\x6d\xc7\x3c\x0d\xe8\x7b\xc1\x1d\x0d\xbe\x3e\xdb\xf8\x37\x54\xbc\xe3\xcd\x34\x4f\xe8\x26\x85\x2e\xc6\x7c\x4d\x82\xaf\x55\x56\x93\x20\x48\xab\xe4\x33\x16\xfd\xa2\xf0\x8b\xbd\xda\xdb\x58\x9d\xbf\xba\xa2\x17\x64\xb3\xa8\x4f\x24\x71\x53\xbd\x9e\x6a\xf4\x5c\x8f\x37\x51\x4c\x67\x87\x72\xfb\xe0\x94\xef\xc6\x66\x96\xa6\xec\xd1\x40\xd8\x63\x27\x15\x82\x7e\xe4\xa6\x39\x72\x71\x58\x3f\x60\x73\xdb\x2f\xf6\x75\xce\xe2\x4c\x6b\xf9\x46\xb1\x22\xb7\x60\x0b\xc4\x16\xc6\x61\x5a\xa8\x15\x2c\xa7\x45\x99\xe6\xf4\x2d\x4e\xa1\x36\x52\x71\x71\x98\x57\xf0\xbc\x1e\x39\x6a\x39\xaa\x06\xdf\x72\xb8\x6a\xf3\x87\xcd\x3d\x5f\xc0\xf7\x0f\xf4\xf3\xce\x2c\xe7\xf8\x4c\xfd\x1e\x7b\x29\x0e\xda\x4e\xe8\x85\x21\x95\xf6\x3b\x46\x0e\x38\xfb\xc6\x6a\x29\x07\x54\x9d\x54\x27\xb7\x51\xd6\xce\x67\xb7\x5f\x6e\xc6\x3c\x8d\xe2\x49\x34\x47\x25\x05\xff\x6e\x79\xd2\xa8\x34\x30\x85\xf0\xb3\xbb\x0d\x71\x7a\x1b\x25\xaf\x31\xd5\xfa\x24\xda\x2f\x99\x2b\xf7\x3a\x8c\x0a\x77\xcf\x6d\xfd\xfa\x49\x1b\x3c\x59\x81\x1c\xf9\x9e\x1b\x0d\xf6\x8d\xcb\xd1\x29\x79\x82\x5e\x1e\x0e\x76\x4a\x5c\x7c\xb9\xe4\xa2\x4e\x3f\xff\x05\x00\x00\xff\xff\xda\xe2\x3e\xe5\xe3\x0a\x00\x00")

func localesEnUsHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsHomeYml,
		"locales/en-US/home.yml",
	)
}

func localesEnUsHomeYml() (*asset, error) {
	bytes, err := localesEnUsHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US/home.yml", size: 2787, mode: os.FileMode(420), modTime: time.Unix(1598341580, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesZhCnHomeYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\x4f\x53\xdb\xd6\x17\xdd\xeb\x53\x78\xcc\xf6\x37\xbf\xe9\x3a\xbb\x87\xf4\x30\x6a\x64\x49\xa3\x3f\x69\xe9\x46\xe3\x18\x4d\x4b\x03\x36\x63\xcc\xa6\xab\x18\x82\x31\xc4\xc2\x34\x31\x14\x8a\x27\x60\x62\x02\x93\xc4\x36\x7f\x52\x0c\x16\x26\x5f\x46\xef\x49\x5e\xf1\x15\x3a\x4f\x4f\x56\x64\xa8\x5b\xbc\x94\xef\x3d\xf7\xde\x73\xcf\x3b\x77\x2c\x9d\x9d\x9b\xcb\x66\x18\x11\x24\xa1\x01\x7f\xe4\x55\x4d\x7d\x12\x8b\xa3\x4d\xcb\x3d\x3e\x45\x9d\x73\xd4\xdc\x41\xb5\x93\x38\xc3\x8c\xa5\x67\x17\x17\xf2\x66\x8e\x61\x05\x5d\xd5\xa0\x62\x70\x50\x80\x1a\x34\x26\x00\x2f\x40\xee\x49\x2c\x8e\xff\x38\xc0\x17\x5b\xa8\x74\xd0\xdf\x6d\xa0\xde\x5b\xb4\x66\xb9\xeb\x97\xf8\x65\xc1\xfd\xf3\x55\x7f\xaf\xe8\xde\x36\x7c\x90\x9c\x39\x6d\x66\xf2\x33\xa9\x59\x66\x28\xdf\x50\xa0\x2a\xe9\x0a\x0b\x49\x6d\x0a\xd1\x38\xf3\xbe\x1c\xdd\xdd\x14\xbc\xf6\x91\x7b\xbc\xd3\x7f\x73\xe4\x5c\xbd\xc6\xb5\x35\xb4\x72\xe1\x15\xaa\xce\x95\x8d\x6b\xdd\xf8\x08\x10\xe3\x27\x49\x7c\x2c\x12\xaa\xb4\xdd\xea\x09\x2a\xfb\x60\x13\x40\x17\x34\x83\x55\x20\x07\x45\x8d\x07\x82\xc1\x02\xd1\x10\x25\x2d\x18\xf6\x49\x2c\xde\xb7\x77\xbc\x56\x03\xad\x36\xb1\xd5\x72\xae\x2c\x6f\xb9\x47\x8b\xdc\xdd\x14\xc8\x7c\xbf\x64\x17\xf2\xcc\xa4\xa4\x6a\x06\x10\x14\x08\xb8\xa9\x6f\x94\xd2\x96\x23\x94\x06\xbd\xfb\xd1\x21\x8b\x0f\x5b\x0e\xf3\x5c\xbb\x42\x5b\x1e\xd0\xf9\x10\xc0\x18\x9f\x32\x64\x45\xfa\x1e\xb2\xda\x63\xb1\xea\xd7\xee\x5e\xcb\xef\x5e\x9d\x52\x35\x98\x34\x78\xd9\x9f\x78\x42\xd2\x45\xd2\x90\xd7\xee\xa0\x95\x12\xaa\x7f\x42\xc5\x5d\x5c\xfb\x8c\x6b\x5d\x5e\xf6\xc3\x45\x89\x84\x82\x67\x80\x17\xc0\xb8\x40\xb8\xe1\xe5\x98\xf7\xd7\x2b\xdc\xdd\x24\xc4\x5c\x5e\x10\x3e\x16\x17\xcc\x1c\x23\x03\x55\xfd\x41\x52\x38\x1f\x37\x09\x34\x76\x92\x34\xd7\x2e\xba\x07\x85\x7e\x75\xd7\x6b\xb7\xe3\x8c\xa4\xf0\x09\x5e\x04\xc2\x70\xc8\xc6\xfe\x70\x94\xae\x42\xc5\xe0\x55\x3f\x08\xb0\x1a\xff\x8c\x54\x75\xab\x27\xb8\xd4\xc1\xb5\x8f\x68\x93\x6c\xd2\x1f\xb4\xe3\x15\xaa\xee\x85\xed\xb6\xea\xee\x66\x11\xfd\xbe\xe3\x37\xec\x67\x47\x47\x23\x8a\x6d\x36\x68\xbe\x1f\x01\xb8\x24\x2f\x8e\xda\x79\x2c\x35\x3d\x37\x93\x89\xd1\x70\xba\x7a\xef\xf0\x53\x64\xfb\xd1\xee\x14\x28\x00\x0d\x72\x91\x65\x04\x6d\x9e\xd7\x43\xe5\x51\xea\xe3\x8c\xc0\x01\x39\x2c\xaa\xcb\x1c\xf0\x8b\x92\xaf\x43\xc5\x9c\xaf\x2d\x5c\xbd\x0e\x74\x96\x33\x7f\x9e\xc9\x66\x06\x0a\x50\x60\x82\x97\xc4\x47\x3d\x25\x54\xee\xa2\xfd\xfd\xa8\x02\x22\x0f\x80\x19\xfb\x2d\x9b\x31\x07\xa8\xe4\x11\x3d\x0e\x73\x80\x30\x24\xac\xe5\x13\xb7\x77\xee\xb5\xea\xa8\xf4\x26\x1e\x9a\x06\xa1\x47\x17\x04\xa2\xab\x8d\x0e\xaa\x6c\x3b\x57\x16\x2a\x9d\x52\x41\xd3\xcd\xe1\xf7\x2f\xf1\xfe\x51\x7f\xc5\x72\x7b\x54\x96\x7c\x12\x24\xe0\xa8\xc4\xad\x1a\x5a\xae\x8c\x48\x64\xc6\xb2\xf3\x66\x66\x21\x9f\x4a\xbf\x60\x12\x50\x1b\xb0\x04\x15\x45\x52\xc8\xf6\xd7\x6e\x29\x08\xa5\x84\xc4\xcf\xe7\xb2\xbf\x9a\xe9\x7c\xd2\x9c\x7b\x6e\xe6\xc2\x7d\x02\x8e\x0b\xf7\x47\x27\xc4\x1d\x1b\xad\x1f\x44\x32\x42\xeb\x08\xf6\x3d\x4a\x43\x74\xe5\x0f\x7c\x63\x90\x35\x09\x54\x23\x60\x8a\xa4\xf8\xc1\xd1\x27\x7f\x77\x53\xf8\x07\xcf\xc9\x64\xa7\x4d\x46\x94\x38\x18\x7a\x8e\xa2\x8b\x22\x2f\x26\x0c\x0d\xa8\x4f\xc9\xc6\x56\x2e\x1d\x7b\xdb\x5b\x5f\x72\x97\xae\xf1\xd6\x69\x7f\xb5\x82\xdf\x5a\x4e\xaf\x86\x9b\xef\x51\xed\x04\xaf\x1d\x7b\xf5\xf2\xff\x62\x5e\xbb\xe3\x36\xd7\xd0\xed\x0a\x6a\x2d\x3b\xf6\x67\xfa\x19\xb5\xca\xb8\xbd\xf5\x7f\x52\xe6\x79\x2a\xfd\x62\x71\x1e\xa4\xd3\xd9\xc5\x4c\x9e\x91\x81\x02\x92\x06\x4c\xca\xda\x14\xa9\x50\x59\xc2\x5b\xa7\x83\x67\x4f\x06\x57\x75\x59\x96\x14\xcd\xf7\x3d\x0b\x57\xdb\xb8\x4c\x0e\x81\x7b\x66\xa3\x77\xaf\xe3\x0c\x3b\x09\xd9\xa7\x91\xd3\x71\x50\xef\x7f\x2c\x87\x92\x0a\x9d\x6d\x1c\xb0\x4f\x75\xd9\x00\x2c\x2b\xe9\xe2\x63\x3d\x0e\x35\x56\x1d\xbb\xe7\x7d\xf9\x80\x2a\x9d\x11\x4e\xc7\x8c\xcd\xcf\xa6\x32\xf7\x8e\xc7\x7f\xc0\x46\xf5\xfc\x10\x36\x72\x20\xc7\x7d\x9e\x98\xa0\xf7\x09\x5e\x80\xd4\x12\x06\xf2\xa5\x7e\x1a\xe0\x93\x56\xf1\xf6\xaa\x63\x5f\xa2\xa2\x85\x4a\xab\xd8\x3a\x8c\xf6\x3f\xf4\x70\x28\x22\x11\x86\x2f\x06\xba\x3d\x1a\xed\x5c\x35\xfd\xc1\x22\xd1\x0a\x54\x35\x49\x81\xf7\xc2\x71\xe1\x10\x35\xac\x41\x78\xa8\x5f\xc5\x5c\xc8\x2e\xe6\xd2\xe6\x43\x4a\x22\x63\xfc\x4b\xf3\xd1\xa5\xdd\x3b\x47\xdf\xf4\x3c\x74\x7c\xce\xde\x39\xdd\x8d\x7b\xaa\xf6\xbe\xee\x79\xf5\x32\x6e\x36\xa8\x3c\x83\x16\x67\xa7\x53\xf3\xd4\x23\x43\x83\xa5\x4c\xa2\xcd\x32\x6e\x1e\xa1\xd2\x29\x11\x56\x60\x94\xdd\xef\x02\x3f\x15\xa4\x04\x2f\xde\xcf\x08\xed\x94\x9e\x60\xbf\x80\x1f\xcd\xf1\x6a\x70\xc3\xc8\xd5\xb0\xf7\xdd\x0f\x05\xdc\x3c\x24\x7f\xd1\x14\x77\xd7\xee\xef\x16\x63\x23\x0e\x0b\xf9\xfd\x1d\x00\x00\xff\xff\x5c\x8a\x8a\xd7\x47\x09\x00\x00")

func localesZhCnHomeYmlBytes() ([]byte, error) {
	return bindataRead(
		_localesZhCnHomeYml,
		"locales/zh-CN/home.yml",
	)
}

func localesZhCnHomeYml() (*asset, error) {
	bytes, err := localesZhCnHomeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/zh-CN/home.yml", size: 2375, mode: os.FileMode(420), modTime: time.Unix(1598341586, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US/home.yml": localesEnUsHomeYml,
	"locales/zh-CN/home.yml": localesZhCnHomeYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesEnUsHomeYml, map[string]*bintree{}},
		}},
		"zh-CN": &bintree{nil, map[string]*bintree{
			"home.yml": &bintree{localesZhCnHomeYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
