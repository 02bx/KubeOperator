- block:
    - name: 在deploy 节点创建相关目录
      file: path={{ item }} state=directory
      with_items:
        - /opt/kube/kube-system/coredns
    # DNS文件中部分参数根据hosts文件设置而定，因此需要用template模块替换参数
    - name: 准备 DNS的部署文件
      template: src={{ item }}.yaml.j2 dest=/opt/kube/kube-system/{{ item }}/{{ item }}.yaml
      with_items:
        - coredns

    - name: 获取所有已经创建的POD信息
      command: "{{ bin_dir }}/kubectl get pod --all-namespaces"
      register: pod_info
  delegate_to: "{{ groups['kube-master'][0] }}"
  run_once: true

- block:
    - name: 获取 Core DNS 镜像
      docker_image:
        name: "{{registry_prefix}}/{{dns_image}}:{{dns_version}}"
        state: present

    - name: 创建CoreDNS部署
      shell: "{{ bin_dir }}/kubectl apply -f /opt/kube/kube-system/coredns"
      run_once: true
      delegate_to: "{{ groups['kube-master'][0] }}"
  when:
    - '"coredns" not in pod_info.stdout'
    - 'dns_install'
  ignore_errors: true

- block:
    - name: 获取 metrics-server 镜像
      docker_image:
        name: "{{registry_prefix}}/{{metricsserver_image}}:{{metricsserver_version}}"
        state: present

    - name: 创建 metrics-server部署
      shell: "{{ bin_dir }}/kubectl apply -f {{ base_dir }}/manifests/metrics-server"
      delegate_to: "{{ groups['kube-master'][0] }}"
      run_once: true
  when: '"metrics-server" not in pod_info.stdout and metricsserver_install'
  ignore_errors: true

# 现阶段 dashboard 获取metrics仍旧依赖于heapster，因此需连带安装heapster
- block:
    - name: 获取 dashboard 镜像
      docker_image:
        name: "{{registry_prefix}}/{{dashboard_image}}:{{dashboard_version}}"
        state: present

    - name: 创建 dashboard部署
      shell: "{{ bin_dir }}/kubectl apply -f {{ base_dir }}/manifests/dashboard && \
	      {{ bin_dir }}/kubectl apply -f {{ base_dir }}/manifests/heapster/heapster-only"
      delegate_to: "{{ groups['kube-master'][0] }}"
      run_once: true
  when: '"kubernetes-dashboard" not in pod_info.stdout and dashboard_install '
  ignore_errors: true

- import_tasks: ingress.yml
  when: '"ingress-controller" not in pod_info.stdout '

- block:
    - name: 获取 heapster 镜像
      docker_image:
        name: "{{registry_prefix}}/{{heapster_image}}:{{heapster_version}}"
        state: present

    - name: 创建 heapster部署
      shell: "{{ bin_dir }}/kubectl apply -f {{ base_dir }}/manifests/heapster/heapster.yaml"
      delegate_to: "{{ groups['kube-master'][0] }}"
      run_once: true
  when: '"heapster" not in pod_info.stdout and heapster_install'
  ignore_errors: true

- block:
    - name: 创建 efk部署
      shell: "{{ bin_dir }}/kubectl apply -f {{ base_dir }}/manifests/efk"
      delegate_to: "{{ groups['kube-master'][0] }}"
      run_once: true
  when: '"elasticsearch" not in pod_info.stdout and efk_install'
  ignore_errors: true

- block:
    - name: 生成harbor配置文件
      template:
        src: "harbor/values.yaml.j2"
        dest: "{{ base_dir }}/manifests/harbor/values.yaml"
      delegate_to: "{{ groups['kube-master'][0] }}"
      run_once: true

    - name: 创建harbor 部署
      shell: "helm install ."
      args:
        chdir: "{{ base_dir }}/manifests/harbor"
      delegate_to: "{{ groups['kube-master'][0] }}"
      run_once: true

    - name: 尝试登陆harbor
      shell: "docker login {{MASTER_IP}}:30003 -u admin -p Harbor12345"
      register: login_result
      until: login_result.rc == 0
      retries: 40
      delay: 30


  when: '"harbor" not in pod_info.stdout and harbor_install'
  ignore_errors: true
- block:
    - name: 创建 prometheus 部署
      shell: "helm install ."
      args:
        chdir: "{{ base_dir }}/manifests/prometheus/prometheus"
      delegate_to: "{{ groups['kube-master'][0] }}"
      run_once: true
  when: '"prometheus" not in pod_info.stdout and prometheus_install'
  ignore_errors: true
- block:
    - name: 创建 grafana 部署
      shell: "helm install ."
      args:
        chdir: "{{ base_dir }}/manifests/prometheus/grafana"
      delegate_to: "{{ groups['kube-master'][0] }}"
      run_once: true
  when: '"harbor" not in pod_info.stdout and harbor_install'
  ignore_errors: true