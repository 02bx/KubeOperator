- block:
    - name: 获取所有已经创建的POD信息
      command: "{{ bin_dir }}/kubectl get pod --all-namespaces"
      register: pod_info
  delegate_to: "{{ groups['kube-master'][0] }}"
  run_once: true

- import_tasks: ingress.yml
  when: '"ingress-controller" not in pod_info.stdout '

- block:
    - name: 创建 dashboard 部署文件
      template:
        src: dashboard/kubernetes-dashboard.yaml.j2
        dest: "{{ base_dir }}/manifests/dashboard/kubernetes-dashboard.yaml"

    - name: 创建 metrics-server 部署文件
      template:
        src: dashboard/metrics-server.yaml.j2
        dest: "{{ base_dir }}/manifests/dashboard/metrics-server.yaml"

    - name: 部署 dashboard
      shell: "{{ bin_dir }}/kubectl apply -f {{ base_dir }}/manifests/dashboard"
      delegate_to: "{{ groups['kube-master'][0] }}"
      run_once: true
  when: '"kubernetes-dashboard" not in pod_info.stdout and dashboard_install '
  ignore_errors: true

- block:
    - name: 创建 monitoring namespace
      shell: "kubectl create ns monitoring"

    - name: 创建 etcd 监控 secrets
      shell: "kubectl -n monitoring create secret generic etcd-secret-files \
          --from-file=/etc/kubernetes/ssl/ca.pem \
          --from-file=/etc/etcd/ssl/etcd.pem \
          --from-file=/etc/etcd/ssl/etcd-key.pem"
      delegate_to: "{{ groups['kube-master'][0] }}"
  ignore_errors: true

- block:
    - name: 拷贝 prometheus values文件
      template: src=prometheus/values.yaml.j2 dest={{ base_dir }}/manifests/prometheus/prometheus/values.yaml

    - name: 拷贝 prometheus setting文件
      template: src=prometheus/prom-settings.yaml.j2 dest={{ base_dir }}/manifests/prometheus/prom-settings.yaml

    - name: 部署 prometheus
      shell: "helm install --name f2c-prometheus --namespace monitoring \
          -f prom-settings.yaml \
          -f prom-alertsmanager.yaml \
          -f prom-alertrules.yaml \
          ./prometheus"
      args:
        chdir: "{{ base_dir }}/manifests/prometheus"
      delegate_to: "{{ groups['kube-master'][0] }}"
      run_once: true
  when: '"prometheus" not in pod_info.stdout and prometheus_install'
  ignore_errors: true

- block:
    - name: 拷贝 grafana values文件
      template: src=grafana/values.yaml.j2 dest={{ base_dir }}/manifests/prometheus/grafana/values.yaml

    - name: 部署 grafana
      shell: "helm install --name f2c-grafana --namespace monitoring \
         -f grafana-settings.yaml \
         -f grafana-dashboards.yaml \
         ./grafana"
      args:
        chdir: "{{ base_dir }}/manifests/prometheus"
      delegate_to: "{{ groups['kube-master'][0] }}"
      run_once: true
  when: '"grafana" not in pod_info.stdout and grafana_install'
  ignore_errors: true

- block:
    - name: 生成 loki 部署文件
      template: src=loki/loki/values.yaml.j2 dest={{ base_dir }}/manifests/prometheus/loki/charts/loki/values.yaml

    - name: 生成 loki ingress部署文件
      template: src=loki/loki/loki-ingress.yaml.j2 dest={{ base_dir }}/manifests/prometheus/loki/charts/loki/templates/ingress.yaml

    - name: 生成 promtail 部署文件
      template: src=loki/promtail/values.yaml.j2 dest={{ base_dir }}/manifests/prometheus/loki/charts/promtail/values.yaml

    - name: 部署 loki-stack
      shell: "helm install --name f2c-loki --namespace monitoring ./loki"
      args:
        chdir: "{{ base_dir }}/manifests/prometheus"
      delegate_to: "{{ groups['kube-master'][0] }}"
      run_once: true
  when: '"loki" not in pod_info.stdout and loki_install and kube_version_main == "1.16"'
  ignore_errors: true

- block:
    - name: 生成 kuberhealthy 部署文件
      template: src=kuberhealthy/values.yaml.j2 dest={{ base_dir }}/manifests/kuberhealthy/values.yaml

    - name: 部署 kuberhealthy
      shell: "helm install --name f2c-kuberhealthy --namespace monitoring ./kuberhealthy"
      args:
        chdir: "{{ base_dir }}/manifests"
      delegate_to: "{{ groups['kube-master'][0] }}"
      run_once: true
  when: '"kuberhealthy" not in pod_info.stdout and kuberhealthy_install'
  ignore_errors: true

- block:
    - name: 生成 scope weave 部署文件
      template: src=weave-scope/scope.yml.j2 dest={{ base_dir }}/manifests/weave-scope/scope.yml

    - name: 部署 scope weave
      shell: "{{ bin_dir }}/kubectl apply -f {{ base_dir }}/manifests/weave-scope/scope.yml"
      args:
        chdir: "{{ base_dir }}/manifests/prometheus"
      delegate_to: "{{ groups['kube-master'][0] }}"
      run_once: true
  when: '"weave-scope" not in pod_info.stdout'
  ignore_errors: true